=begin comment

TextMagic API Documentation

# Overview ## Introduction <img style=\"float: right; margin-left: 10px; width: 100px;\" src=\"images/phone.png\"> TextMagic SMS API is a platform for building your own messaging app using our messaging infrastructure. It allows you to send and receive SMS text messages, query information about inbound and outbound messages, manage contacts, create templates (i.e. message formats and static texts) and schedule recurrent SMS messages as well as process bulk SMS messages. <button name=\"button\" onclick=\"http://www.google.com\" class=\"btn\">Try TextMagic API for Free</button>  ### Two Ways to Use TextMagic API * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’s messaging gateway features * [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/) – set up two-way SMS communication without the need to write any additional code  ### Code Libraries We have created a set of client libraries for the most popular programming languages (such as REST API Java and REST API PHP). These libraries allow you to integrate our API into your code in minutes. Just choose your preferred language to get started:  ## Getting started Get Started with the TextMagic REST API To start sending text messages using the TextMagic REST API, just follow these steps: 1. Generate the API credentials 1. Connect to our API endpoint This page provides all the information you need to get started. Here, we explain the following steps:  How to obtain the API credentials The API endpoint How the REST API works The next step How to obtain the API credentials  ### How to obtain the API credentials To start sending text messages, you need to create an API key. API keys are similar to an account password; the difference is that an API key only provides access to the API: you cannot log in to TextMagic Online using the API key.  Your program sends the login credentials with each API request as HTTP headers: `X-TM-Username` is your TextMagic username, while `X-TM-Key` is your API key.  How to obtain an API key:  1. Log in to TextMagic (or start a free trial if you haven’t registered yet). 1. Go to the API settings page. 1. Click the Add new API key button. 1. Enter an app name for this key. Note, it’s just a label, so pick any name. 1. Click Generate new key. 1. You should now see your new API key in the green notification banner above the table:  ![alt text](images/credentials.png)  > Note for API v1 users > V1 keys are not compatible with the V2 version of the TextMagic REST API, so you will need to generate a new API key to use the V2 endpoint.  ### The API endpoint The TextMagic REST API endpoint is: ``` https://rest.textmagic.com/api/v2 ``` All the URLs referenced in this documentation should use this base URL.  ### How the REST API works REST APIs use the HTTP protocol to send and receive messages. REST messages are usually encoded as JSON documents and are an improvement over older methods such as the XML based SOAP protocol. REST APIs use the same set of methods that web browsers use: POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read, update and delete. Often, REST URIs provide direct CRUD access to entities or collections of entities, for example: http://api.foo.com/people. In this instance, to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}. REST makes these types of operations simple.  > Example > > Let’s take the entity most often used in messaging: contacts. Imagine you want to perform operations on your contacts list: well, it’s only a matter of calling the following endpoints: > * GET /api/v2/contacts (get all of your contacts) > * GET /api/v2/contacts/{id} (get a specific contact) > * POST /api/v2/contacts (create a new contact) > * PUT /api/v2/contacts/{id} (update an existing contact) > * DELETE /api/v2/contacts/{id} (delete an existing contact) It’s that simple! In fact, that’s all you need to do to manage the contacts in your TextMagic account!  ## Sandbox Sandbox is a tool to test TextMagic REST API requests without the need to install any applications or write any code. Here, we explain the following details about Sandbox: * The credentials area * Command documentation * How it works  <a href=\"\">Go to TextMagic Sandbox</a>  ### The credentials area To make requests using your TextMagic account, you need to enter your account username and your API key into the corresponding fields. You may also Save them in your browser or press Clear to erase them.  ![alt text](images/sandbox.png) 

OpenAPI spec version: 2
Contact: support@textmagi.biz
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::TextMagicApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# assign_contacts_to_list
#
# Assign contacts to the specified list.
# 
# @param AssignContactsToListInputObject $assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user (required)
# @param int $id  (required)
{
    my $params = {
    'assign_contacts_to_list_input_object' => {
        data_type => 'AssignContactsToListInputObject',
        description => 'Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'assign_contacts_to_list' } = { 
    	summary => 'Assign contacts to the specified list.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub assign_contacts_to_list {
    my ($self, %args) = @_;

    # verify the required parameter 'assign_contacts_to_list_input_object' is set
    unless (exists $args{'assign_contacts_to_list_input_object'}) {
      croak("Missing the required parameter 'assign_contacts_to_list_input_object' when calling assign_contacts_to_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling assign_contacts_to_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'assign_contacts_to_list_input_object'}) {
        $_body_data = $args{'assign_contacts_to_list_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# block_contact
#
# Block contact from inbound and outbound communication by phone number.
# 
# @param BlockContactInputObject $block_contact_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'block_contact_input_object' => {
        data_type => 'BlockContactInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'block_contact' } = { 
    	summary => 'Block contact from inbound and outbound communication by phone number.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub block_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'block_contact_input_object' is set
    unless (exists $args{'block_contact_input_object'}) {
      croak("Missing the required parameter 'block_contact_input_object' when calling block_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/block';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'block_contact_input_object'}) {
        $_body_data = $args{'block_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# buy_dedicated_number
#
# Buy a dedicated number and assign it to the specified account.
# 
# @param BuyDedicatedNumberInputObject $buy_dedicated_number_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'buy_dedicated_number_input_object' => {
        data_type => 'BuyDedicatedNumberInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'buy_dedicated_number' } = { 
    	summary => 'Buy a dedicated number and assign it to the specified account.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub buy_dedicated_number {
    my ($self, %args) = @_;

    # verify the required parameter 'buy_dedicated_number_input_object' is set
    unless (exists $args{'buy_dedicated_number_input_object'}) {
      croak("Missing the required parameter 'buy_dedicated_number_input_object' when calling buy_dedicated_number");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'buy_dedicated_number_input_object'}) {
        $_body_data = $args{'buy_dedicated_number_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# cancel_survey
#
# Cancel a survey.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cancel_survey' } = { 
    	summary => 'Cancel a survey.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub cancel_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling cancel_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}/cancel';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# check_phone_verification_code
#
# Check user phone verification code
# 
# @param CheckPhoneVerificationCodeInputObject $check_phone_verification_code_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'check_phone_verification_code_input_object' => {
        data_type => 'CheckPhoneVerificationCodeInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_phone_verification_code' } = { 
    	summary => 'Check user phone verification code',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub check_phone_verification_code {
    my ($self, %args) = @_;

    # verify the required parameter 'check_phone_verification_code_input_object' is set
    unless (exists $args{'check_phone_verification_code_input_object'}) {
      croak("Missing the required parameter 'check_phone_verification_code_input_object' when calling check_phone_verification_code");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/phone/verification';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'check_phone_verification_code_input_object'}) {
        $_body_data = $args{'check_phone_verification_code_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# clear_and_assign_contacts_to_list
#
# Reset list members to the specified contacts.
# 
# @param ClearAndAssignContactsToListInputObject $clear_and_assign_contacts_to_list_input_object Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user (required)
# @param int $id  (required)
{
    my $params = {
    'clear_and_assign_contacts_to_list_input_object' => {
        data_type => 'ClearAndAssignContactsToListInputObject',
        description => 'Contact ID(s), separated by comma or &#39;all&#39; to add all contacts belonging to the current user',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'clear_and_assign_contacts_to_list' } = { 
    	summary => 'Reset list members to the specified contacts.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub clear_and_assign_contacts_to_list {
    my ($self, %args) = @_;

    # verify the required parameter 'clear_and_assign_contacts_to_list_input_object' is set
    unless (exists $args{'clear_and_assign_contacts_to_list_input_object'}) {
      croak("Missing the required parameter 'clear_and_assign_contacts_to_list_input_object' when calling clear_and_assign_contacts_to_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling clear_and_assign_contacts_to_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'clear_and_assign_contacts_to_list_input_object'}) {
        $_body_data = $args{'clear_and_assign_contacts_to_list_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# close_chats_bulk
#
# Close chats by chat ids or close all chats
# 
# @param CloseChatsBulkInputObject $close_chats_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'close_chats_bulk_input_object' => {
        data_type => 'CloseChatsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'close_chats_bulk' } = { 
    	summary => 'Close chats by chat ids or close all chats',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub close_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'close_chats_bulk_input_object' is set
    unless (exists $args{'close_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'close_chats_bulk_input_object' when calling close_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/close/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'close_chats_bulk_input_object'}) {
        $_body_data = $args{'close_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# close_read_chats
#
# Close all chats that have no unread messages.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'close_read_chats' } = { 
    	summary => 'Close all chats that have no unread messages.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub close_read_chats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/close/read';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# close_subaccount
#
# Close subaccount.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'close_subaccount' } = { 
    	summary => 'Close subaccount.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub close_subaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling close_subaccount");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_contact
#
# Create a new contact from the submitted data.
# 
# @param CreateContactInputObject $create_contact_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_contact_input_object' => {
        data_type => 'CreateContactInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact' } = { 
    	summary => 'Create a new contact from the submitted data.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'create_contact_input_object' is set
    unless (exists $args{'create_contact_input_object'}) {
      croak("Missing the required parameter 'create_contact_input_object' when calling create_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_contact_input_object'}) {
        $_body_data = $args{'create_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_contact_note
#
# Create a new contact note.
# 
# @param CreateContactNoteInputObject $create_contact_note_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_contact_note_input_object' => {
        data_type => 'CreateContactNoteInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_contact_note' } = { 
    	summary => 'Create a new contact note.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'create_contact_note_input_object' is set
    unless (exists $args{'create_contact_note_input_object'}) {
      croak("Missing the required parameter 'create_contact_note_input_object' when calling create_contact_note");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/notes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_contact_note_input_object'}) {
        $_body_data = $args{'create_contact_note_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_custom_field
#
# Create a new custom field from the submitted data.
# 
# @param CreateCustomFieldInputObject $create_custom_field_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_custom_field_input_object' => {
        data_type => 'CreateCustomFieldInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_custom_field' } = { 
    	summary => 'Create a new custom field from the submitted data.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'create_custom_field_input_object' is set
    unless (exists $args{'create_custom_field_input_object'}) {
      croak("Missing the required parameter 'create_custom_field_input_object' when calling create_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_custom_field_input_object'}) {
        $_body_data = $args{'create_custom_field_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_list
#
# Create a new list from the submitted data.
# 
# @param CreateListInputObject $create_list_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_list_input_object' => {
        data_type => 'CreateListInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_list' } = { 
    	summary => 'Create a new list from the submitted data.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_list {
    my ($self, %args) = @_;

    # verify the required parameter 'create_list_input_object' is set
    unless (exists $args{'create_list_input_object'}) {
      croak("Missing the required parameter 'create_list_input_object' when calling create_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_list_input_object'}) {
        $_body_data = $args{'create_list_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_push_token
#
# Add or update a device token.
# 
# @param CreatePushTokenInputObject $create_push_token_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_push_token_input_object' => {
        data_type => 'CreatePushTokenInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_push_token' } = { 
    	summary => 'Add or update a device token.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub create_push_token {
    my ($self, %args) = @_;

    # verify the required parameter 'create_push_token_input_object' is set
    unless (exists $args{'create_push_token_input_object'}) {
      croak("Missing the required parameter 'create_push_token_input_object' when calling create_push_token");
    }

    # parse inputs
    my $_resource_path = '/api/v2/push/tokens';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_push_token_input_object'}) {
        $_body_data = $args{'create_push_token_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# create_survey
#
# Create a new survey from the submitted data.
# 
# @param CreateSurveyInputObject $create_survey_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_survey_input_object' => {
        data_type => 'CreateSurveyInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey' } = { 
    	summary => 'Create a new survey from the submitted data.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'create_survey_input_object' is set
    unless (exists $args{'create_survey_input_object'}) {
      croak("Missing the required parameter 'create_survey_input_object' when calling create_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_survey_input_object'}) {
        $_body_data = $args{'create_survey_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_survey_node
#
# Create a new node from the submitted data.
# 
# @param CreateSurveyNodeInputObject $create_survey_node_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_survey_node_input_object' => {
        data_type => 'CreateSurveyNodeInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_survey_node' } = { 
    	summary => 'Create a new node from the submitted data.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_survey_node {
    my ($self, %args) = @_;

    # verify the required parameter 'create_survey_node_input_object' is set
    unless (exists $args{'create_survey_node_input_object'}) {
      croak("Missing the required parameter 'create_survey_node_input_object' when calling create_survey_node");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling create_survey_node");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}/nodes';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_survey_node_input_object'}) {
        $_body_data = $args{'create_survey_node_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# create_template
#
# Create a new template from the submitted data.
# 
# @param CreateTemplateInputObject $create_template_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'create_template_input_object' => {
        data_type => 'CreateTemplateInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_template' } = { 
    	summary => 'Create a new template from the submitted data.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub create_template {
    my ($self, %args) = @_;

    # verify the required parameter 'create_template_input_object' is set
    unless (exists $args{'create_template_input_object'}) {
      croak("Missing the required parameter 'create_template_input_object' when calling create_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'create_template_input_object'}) {
        $_body_data = $args{'create_template_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# delete_all_contacts
#
# Delete all contacts.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_contacts' } = { 
    	summary => 'Delete all contacts.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contact/all';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_all_outbound_messages
#
# Delete all messages
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_all_outbound_messages' } = { 
    	summary => 'Delete all messages',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_all_outbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/message/all';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_avatar
#
# Delete an avatar for the current user.\\
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'delete_avatar' } = { 
    	summary => 'Delete an avatar for the current user.\\',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_avatar {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/avatar';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_chat_messages
#
# Delete messages from chat by given messages ID(s).
# 
# @param DeleteChatMessagesBulkInputObject $delete_chat_messages_bulk_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_chat_messages_bulk_input_object' => {
        data_type => 'DeleteChatMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_chat_messages' } = { 
    	summary => 'Delete messages from chat by given messages ID(s).',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_chat_messages {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_chat_messages_bulk_input_object' is set
    unless (exists $args{'delete_chat_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_chat_messages_bulk_input_object' when calling delete_chat_messages");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_chat_messages");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{id}/messages/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_chat_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_chat_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_chats_bulk
#
# Delete chats by given ID(s) or delete all chats.
# 
# @param DeleteChatsBulkInputObject $delete_chats_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_chats_bulk_input_object' => {
        data_type => 'DeleteChatsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_chats_bulk' } = { 
    	summary => 'Delete chats by given ID(s) or delete all chats.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_chats_bulk_input_object' is set
    unless (exists $args{'delete_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_chats_bulk_input_object' when calling delete_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_chats_bulk_input_object'}) {
        $_body_data = $args{'delete_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact
#
# Delete a single contact.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact' } = { 
    	summary => 'Delete a single contact.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact_avatar
#
# Delete an avatar for the contact.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_avatar' } = { 
    	summary => 'Delete an avatar for the contact.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/avatar';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact_note
#
# Delete a single contact note.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_note' } = { 
    	summary => 'Delete a single contact note.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/notes/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contact_notes_bulk
#
# Delete contact note by given ID(s) or delete all contact notes.
# 
# @param int $id  (required)
# @param DeleteContactNotesBulkInputObject $delete_contact_notes_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'delete_contact_notes_bulk_input_object' => {
        data_type => 'DeleteContactNotesBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contact_notes_bulk' } = { 
    	summary => 'Delete contact note by given ID(s) or delete all contact notes.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contact_notes_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contact_notes_bulk");
    }

    # verify the required parameter 'delete_contact_notes_bulk_input_object' is set
    unless (exists $args{'delete_contact_notes_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_contact_notes_bulk_input_object' when calling delete_contact_notes_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/notes/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_contact_notes_bulk_input_object'}) {
        $_body_data = $args{'delete_contact_notes_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contacts_by_ids
#
# Delete contact by given ID(s) or delete all contacts.
# 
# @param DeleteContactsByIdsInputObject $delete_contacts_by_ids_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_contacts_by_ids_input_object' => {
        data_type => 'DeleteContactsByIdsInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contacts_by_ids' } = { 
    	summary => 'Delete contact by given ID(s) or delete all contacts.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contacts_by_ids {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_contacts_by_ids_input_object' is set
    unless (exists $args{'delete_contacts_by_ids_input_object'}) {
      croak("Missing the required parameter 'delete_contacts_by_ids_input_object' when calling delete_contacts_by_ids");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_contacts_by_ids_input_object'}) {
        $_body_data = $args{'delete_contacts_by_ids_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_contacts_from_list
#
# Unassign contacts from the specified list.
# 
# @param DeleteContacsFromListObject $delete_contacs_from_list_object Contact ID(s), separated by comma (required)
# @param int $id  (required)
{
    my $params = {
    'delete_contacs_from_list_object' => {
        data_type => 'DeleteContacsFromListObject',
        description => 'Contact ID(s), separated by comma',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_contacts_from_list' } = { 
    	summary => 'Unassign contacts from the specified list.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_contacts_from_list {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_contacs_from_list_object' is set
    unless (exists $args{'delete_contacs_from_list_object'}) {
      croak("Missing the required parameter 'delete_contacs_from_list_object' when calling delete_contacts_from_list");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_contacts_from_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_contacs_from_list_object'}) {
        $_body_data = $args{'delete_contacs_from_list_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_custom_field
#
# Delete a single custom field.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_custom_field' } = { 
    	summary => 'Delete a single custom field.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_dedicated_number
#
# Cancel dedicated number subscription.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_dedicated_number' } = { 
    	summary => 'Cancel dedicated number subscription.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_dedicated_number {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_dedicated_number");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbound_message
#
# Delete the incoming message.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbound_message' } = { 
    	summary => 'Delete the incoming message.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_inbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/replies/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_inbound_messages_bulk
#
# Delete inbound messages by given ID(s) or delete all inbound messages.
# 
# @param DeleteInboundMessagesBulkInputObject $delete_inbound_messages_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_inbound_messages_bulk_input_object' => {
        data_type => 'DeleteInboundMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_inbound_messages_bulk' } = { 
    	summary => 'Delete inbound messages by given ID(s) or delete all inbound messages.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_inbound_messages_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_inbound_messages_bulk_input_object' is set
    unless (exists $args{'delete_inbound_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_inbound_messages_bulk_input_object' when calling delete_inbound_messages_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/replies/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_inbound_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_inbound_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_list
#
# Delete a single list.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_list' } = { 
    	summary => 'Delete a single list.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_list {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_list_avatar
#
# Delete an avatar for the list.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_list_avatar' } = { 
    	summary => 'Delete an avatar for the list.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_list_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_list_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/avatar';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_list_contacts_bulk
#
# Delete contact from list by given ID(s) or all contacts from list.
# 
# @param DeleteListContactsBulkInputObject $delete_list_contacts_bulk_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_list_contacts_bulk_input_object' => {
        data_type => 'DeleteListContactsBulkInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_list_contacts_bulk' } = { 
    	summary => 'Delete contact from list by given ID(s) or all contacts from list.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_list_contacts_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_list_contacts_bulk_input_object' is set
    unless (exists $args{'delete_list_contacts_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_list_contacts_bulk_input_object' when calling delete_list_contacts_bulk");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_list_contacts_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_list_contacts_bulk_input_object'}) {
        $_body_data = $args{'delete_list_contacts_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_lists_bulk
#
# Delete list by given ID(s) or delete all lists.
# 
# @param DeleteListsBulkInputObject $delete_lists_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_lists_bulk_input_object' => {
        data_type => 'DeleteListsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_lists_bulk' } = { 
    	summary => 'Delete list by given ID(s) or delete all lists.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_lists_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_lists_bulk_input_object' is set
    unless (exists $args{'delete_lists_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_lists_bulk_input_object' when calling delete_lists_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_lists_bulk_input_object'}) {
        $_body_data = $args{'delete_lists_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_message_session
#
# Delete a message session, together with all nested messages.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_message_session' } = { 
    	summary => 'Delete a message session, together with all nested messages.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_message_session {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_message_session");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_message_sessions_bulk
#
# Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.
# 
# @param DeleteMessageSessionsBulkInputObject $delete_message_sessions_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_message_sessions_bulk_input_object' => {
        data_type => 'DeleteMessageSessionsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_message_sessions_bulk' } = { 
    	summary => 'Delete messages sessions, together with all nested messages, by given ID(s) or delete all messages sessions.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_message_sessions_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_message_sessions_bulk_input_object' is set
    unless (exists $args{'delete_message_sessions_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_message_sessions_bulk_input_object' when calling delete_message_sessions_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_message_sessions_bulk_input_object'}) {
        $_body_data = $args{'delete_message_sessions_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_outbound_message
#
# Delete message
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_outbound_message' } = { 
    	summary => 'Delete message',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_outbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_outbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_outbound_messages_bulk
#
# Delete messages by IDs
# 
# @param DeleteOutboundMessagesBulkInputObject $delete_outbound_messages_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_outbound_messages_bulk_input_object' => {
        data_type => 'DeleteOutboundMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_outbound_messages_bulk' } = { 
    	summary => 'Delete messages by IDs',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_outbound_messages_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_outbound_messages_bulk_input_object' is set
    unless (exists $args{'delete_outbound_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_outbound_messages_bulk_input_object' when calling delete_outbound_messages_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_outbound_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_outbound_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_push_token
#
# Delete a push notification device token.
# 
# @param string $type  (required)
# @param int $device_id  (required)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'device_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_push_token' } = { 
    	summary => 'Delete a push notification device token.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_push_token {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling delete_push_token");
    }

    # verify the required parameter 'device_id' is set
    unless (exists $args{'device_id'}) {
      croak("Missing the required parameter 'device_id' when calling delete_push_token");
    }

    # parse inputs
    my $_resource_path = '/api/v2/push/tokens/{type}/{deviceId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'type'}) {
        my $_base_variable = "{" . "type" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'type'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'device_id'}) {
        my $_base_variable = "{" . "deviceId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'device_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_scheduled_message
#
# Delete a message session, together with all nested messages.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_scheduled_message' } = { 
    	summary => 'Delete a message session, together with all nested messages.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_scheduled_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_scheduled_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/schedules/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_scheduled_messages_bulk
#
# Delete scheduled messages by given ID(s) or delete all scheduled messages.
# 
# @param DeleteScheduledMessagesBulkInputObject $delete_scheduled_messages_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_scheduled_messages_bulk_input_object' => {
        data_type => 'DeleteScheduledMessagesBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_scheduled_messages_bulk' } = { 
    	summary => 'Delete scheduled messages by given ID(s) or delete all scheduled messages.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_scheduled_messages_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_scheduled_messages_bulk_input_object' is set
    unless (exists $args{'delete_scheduled_messages_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_scheduled_messages_bulk_input_object' when calling delete_scheduled_messages_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/schedules/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_scheduled_messages_bulk_input_object'}) {
        $_body_data = $args{'delete_scheduled_messages_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_sender_id
#
# Delete a Sender ID.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_sender_id' } = { 
    	summary => 'Delete a Sender ID.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_sender_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_sender_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/senderids/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_survey
#
# Delete a survey.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey' } = { 
    	summary => 'Delete a survey.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_survey_node
#
# Delete a node.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_survey_node' } = { 
    	summary => 'Delete a node.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_survey_node {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_survey_node");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/nodes/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_template
#
# Delete a single template.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_template' } = { 
    	summary => 'Delete a single template.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling delete_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/{id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# delete_templates_bulk
#
# Delete template by given ID(s) or delete all templates.
# 
# @param DeleteTemplatesBulkInputObject $delete_templates_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'delete_templates_bulk_input_object' => {
        data_type => 'DeleteTemplatesBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_templates_bulk' } = { 
    	summary => 'Delete template by given ID(s) or delete all templates.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_templates_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'delete_templates_bulk_input_object' is set
    unless (exists $args{'delete_templates_bulk_input_object'}) {
      croak("Missing the required parameter 'delete_templates_bulk_input_object' when calling delete_templates_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/delete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'delete_templates_bulk_input_object'}) {
        $_body_data = $args{'delete_templates_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# do_auth
#
# Authenticate user by given username and password.
# 
# @param DoAuthInputObject $do_auth_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'do_auth_input_object' => {
        data_type => 'DoAuthInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'do_auth' } = { 
    	summary => 'Authenticate user by given username and password.',
        params => $params,
        returns => 'DoAuthResponse',
        };
}
# @return DoAuthResponse
#
sub do_auth {
    my ($self, %args) = @_;

    # verify the required parameter 'do_auth_input_object' is set
    unless (exists $args{'do_auth_input_object'}) {
      croak("Missing the required parameter 'do_auth_input_object' when calling do_auth");
    }

    # parse inputs
    my $_resource_path = '/api/v2/auth';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'do_auth_input_object'}) {
        $_body_data = $args{'do_auth_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DoAuthResponse', $response);
    return $_response_object;
}

#
# do_carrier_lookup
#
# Carrier Lookup
# 
# @param string $phone  (required)
# @param string $country Country code for local formatted numbers (optional, default to US)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'country' => {
        data_type => 'string',
        description => 'Country code for local formatted numbers',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'do_carrier_lookup' } = { 
    	summary => 'Carrier Lookup',
        params => $params,
        returns => 'DoCarrierLookupResponse',
        };
}
# @return DoCarrierLookupResponse
#
sub do_carrier_lookup {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling do_carrier_lookup");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lookups/{phone}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    # path params
    if ( exists $args{'phone'}) {
        my $_base_variable = "{" . "phone" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DoCarrierLookupResponse', $response);
    return $_response_object;
}

#
# do_email_lookup
#
# Validate Email address using Email Lookup tool
# 
# @param string $email  (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'do_email_lookup' } = { 
    	summary => 'Validate Email address using Email Lookup tool',
        params => $params,
        returns => 'DoEmailLookupResponse',
        };
}
# @return DoEmailLookupResponse
#
sub do_email_lookup {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling do_email_lookup");
    }

    # parse inputs
    my $_resource_path = '/api/v2/email-lookups/{email}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DoEmailLookupResponse', $response);
    return $_response_object;
}

#
# duplicate_survey
#
# Duplicate a survey.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'duplicate_survey' } = { 
    	summary => 'Duplicate a survey.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub duplicate_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling duplicate_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}/duplicate';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# get_all_bulk_sessions
#
# Get all bulk sending sessions.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_bulk_sessions' } = { 
    	summary => 'Get all bulk sending sessions.',
        params => $params,
        returns => 'GetAllBulkSessionsResponse',
        };
}
# @return GetAllBulkSessionsResponse
#
sub get_all_bulk_sessions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/bulks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllBulkSessionsResponse', $response);
    return $_response_object;
}

#
# get_all_chats
#
# Get all user chats.
# 
# @param string $status Fetch only (a)ctive, (c)losed or (d)eleted chats (optional)
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param int $voice Fetch results with voice calls (optional, default to 0)
# @param int $flat Should additional contact info be included (optional, default to 0)
{
    my $params = {
    'status' => {
        data_type => 'string',
        description => 'Fetch only (a)ctive, (c)losed or (d)eleted chats',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'voice' => {
        data_type => 'int',
        description => 'Fetch results with voice calls',
        required => '0',
    },
    'flat' => {
        data_type => 'int',
        description => 'Should additional contact info be included',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_chats' } = { 
    	summary => 'Get all user chats.',
        params => $params,
        returns => 'GetAllChatsResponse',
        };
}
# @return GetAllChatsResponse
#
sub get_all_chats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'voice'}) {
        $query_params->{'voice'} = $self->{api_client}->to_query_value($args{'voice'});
    }

    # query params
    if ( exists $args{'flat'}) {
        $query_params->{'flat'} = $self->{api_client}->to_query_value($args{'flat'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllChatsResponse', $response);
    return $_response_object;
}

#
# get_all_inbound_messages
#
# Get all inbox messages.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_inbound_messages' } = { 
    	summary => 'Get all inbox messages.',
        params => $params,
        returns => 'GetAllInboundMessagesResponse',
        };
}
# @return GetAllInboundMessagesResponse
#
sub get_all_inbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/replies';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllInboundMessagesResponse', $response);
    return $_response_object;
}

#
# get_all_message_sessions
#
# Get all message sending sessions.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_message_sessions' } = { 
    	summary => 'Get all message sending sessions.',
        params => $params,
        returns => 'GetAllMessageSessionsResponse',
        };
}
# @return GetAllMessageSessionsResponse
#
sub get_all_message_sessions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/sessions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllMessageSessionsResponse', $response);
    return $_response_object;
}

#
# get_all_outbound_messages
#
# Get all messages
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param int $last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'last_id' => {
        data_type => 'int',
        description => 'Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_outbound_messages' } = { 
    	summary => 'Get all messages',
        params => $params,
        returns => 'GetAllOutboundMessagesResponse',
        };
}
# @return GetAllOutboundMessagesResponse
#
sub get_all_outbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'last_id'}) {
        $query_params->{'lastId'} = $self->{api_client}->to_query_value($args{'last_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllOutboundMessagesResponse', $response);
    return $_response_object;
}

#
# get_all_scheduled_messages
#
# Get all scheduled messages.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Fetch schedules with the specific status: a - actual, c - completed, x - all',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_scheduled_messages' } = { 
    	summary => 'Get all scheduled messages.',
        params => $params,
        returns => 'GetAllScheduledMessagesResponse',
        };
}
# @return GetAllScheduledMessagesResponse
#
sub get_all_scheduled_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/schedules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllScheduledMessagesResponse', $response);
    return $_response_object;
}

#
# get_all_templates
#
# Get all user templates.
# 
# @param int $page Fetch specified results page (optional)
# @param int $limit How many results to return (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_all_templates' } = { 
    	summary => 'Get all user templates.',
        params => $params,
        returns => 'GetAllTemplatesResponse',
        };
}
# @return GetAllTemplatesResponse
#
sub get_all_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/templates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAllTemplatesResponse', $response);
    return $_response_object;
}

#
# get_available_dedicated_numbers
#
# Find available dedicated numbers to buy.
# 
# @param string $country Dedicated number country. Two letters in upper case (required)
# @param int $prefix Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore. (optional, default to 1)
# @param int $tollfree Should we show only tollfree numbers (tollfree available only for US). Default is false. (optional, default to 0)
{
    my $params = {
    'country' => {
        data_type => 'string',
        description => 'Dedicated number country. Two letters in upper case',
        required => '1',
    },
    'prefix' => {
        data_type => 'int',
        description => 'Desired number prefix. Should include country code (i.e. 447 for GB). In case provide tollfree &#x3D; 1 parameter and there are available tollfree numbers, this parameter will be ignore.',
        required => '0',
    },
    'tollfree' => {
        data_type => 'int',
        description => 'Should we show only tollfree numbers (tollfree available only for US). Default is false.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_available_dedicated_numbers' } = { 
    	summary => 'Find available dedicated numbers to buy.',
        params => $params,
        returns => 'GetAvailableDedicatedNumbersResponse',
        };
}
# @return GetAvailableDedicatedNumbersResponse
#
sub get_available_dedicated_numbers {
    my ($self, %args) = @_;

    # verify the required parameter 'country' is set
    unless (exists $args{'country'}) {
      croak("Missing the required parameter 'country' when calling get_available_dedicated_numbers");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers/available';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'prefix'}) {
        $query_params->{'prefix'} = $self->{api_client}->to_query_value($args{'prefix'});
    }

    # query params
    if ( exists $args{'tollfree'}) {
        $query_params->{'tollfree'} = $self->{api_client}->to_query_value($args{'tollfree'});
    }

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAvailableDedicatedNumbersResponse', $response);
    return $_response_object;
}

#
# get_available_sender_setting_options
#
# Get all available sender setting options which could be used in \"from\" parameter of POST messages method.
# 
# @param string $country Return sender setting options available in specific country only. Two upper case characters (optional)
{
    my $params = {
    'country' => {
        data_type => 'string',
        description => 'Return sender setting options available in specific country only. Two upper case characters',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_available_sender_setting_options' } = { 
    	summary => 'Get all available sender setting options which could be used in \&quot;from\&quot; parameter of POST messages method.',
        params => $params,
        returns => 'GetAvailableSenderSettingOptionsResponse',
        };
}
# @return GetAvailableSenderSettingOptionsResponse
#
sub get_available_sender_setting_options {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/sources';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetAvailableSenderSettingOptionsResponse', $response);
    return $_response_object;
}

#
# get_balance_notification_options
#
# Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_balance_notification_options' } = { 
    	summary => 'Returns the list of available balance options which can be used as a bound to determine when to send email to user with low balance notification. See https://my.textmagic.com/online/account/notifications/balance',
        params => $params,
        returns => 'GetBalanceNotificationOptionsResponse',
        };
}
# @return GetBalanceNotificationOptionsResponse
#
sub get_balance_notification_options {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/balance/bundles';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBalanceNotificationOptionsResponse', $response);
    return $_response_object;
}

#
# get_balance_notification_settings
#
# Get balance notification settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_balance_notification_settings' } = { 
    	summary => 'Get balance notification settings',
        params => $params,
        returns => 'GetBalanceNotificationSettingsResponse',
        };
}
# @return GetBalanceNotificationSettingsResponse
#
sub get_balance_notification_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/balance';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBalanceNotificationSettingsResponse', $response);
    return $_response_object;
}

#
# get_blocked_contacts
#
# Get blocked contacts.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $query Find blocked contacts by specified search query (optional)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find blocked contacts by specified search query',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_blocked_contacts' } = { 
    	summary => 'Get blocked contacts.',
        params => $params,
        returns => 'GetBlockedContactsResponse',
        };
}
# @return GetBlockedContactsResponse
#
sub get_blocked_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts/block/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetBlockedContactsResponse', $response);
    return $_response_object;
}

#
# get_bulk_session
#
# Get bulk message session status.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_bulk_session' } = { 
    	summary => 'Get bulk message session status.',
        params => $params,
        returns => 'BulkSession',
        };
}
# @return BulkSession
#
sub get_bulk_session {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_bulk_session");
    }

    # parse inputs
    my $_resource_path = '/api/v2/bulks/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BulkSession', $response);
    return $_response_object;
}

#
# get_callback_settings
#
# Fetch callback URL settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_callback_settings' } = { 
    	summary => 'Fetch callback URL settings',
        params => $params,
        returns => 'GetCallbackSettingsResponse',
        };
}
# @return GetCallbackSettingsResponse
#
sub get_callback_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/callback/settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCallbackSettingsResponse', $response);
    return $_response_object;
}

#
# get_calls_prices
#
# Check pricing for a inbound/outbound call.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_calls_prices' } = { 
    	summary => 'Check pricing for a inbound/outbound call.',
        params => $params,
        returns => 'HASH[string,object]',
        };
}
# @return HASH[string,object]
#
sub get_calls_prices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/calls/price';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('HASH[string,object]', $response);
    return $_response_object;
}

#
# get_chat
#
# Get a single chat.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat' } = { 
    	summary => 'Get a single chat.',
        params => $params,
        returns => 'Chat',
        };
}
# @return Chat
#
sub get_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_chat");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Chat', $response);
    return $_response_object;
}

#
# get_chat_by_phone
#
# Find chats by phone.
# 
# @param string $phone  (required)
# @param int $upsert Create a new chat if not found (optional, default to 0)
# @param int $reopen Reopen chat if found or do not change status (optional, default to 0)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'upsert' => {
        data_type => 'int',
        description => 'Create a new chat if not found',
        required => '0',
    },
    'reopen' => {
        data_type => 'int',
        description => 'Reopen chat if found or do not change status',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat_by_phone' } = { 
    	summary => 'Find chats by phone.',
        params => $params,
        returns => 'Chat',
        };
}
# @return Chat
#
sub get_chat_by_phone {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling get_chat_by_phone");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{phone}/by/phone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'upsert'}) {
        $query_params->{'upsert'} = $self->{api_client}->to_query_value($args{'upsert'});
    }

    # query params
    if ( exists $args{'reopen'}) {
        $query_params->{'reopen'} = $self->{api_client}->to_query_value($args{'reopen'});
    }

    # path params
    if ( exists $args{'phone'}) {
        my $_base_variable = "{" . "phone" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Chat', $response);
    return $_response_object;
}

#
# get_chat_messages
#
# Fetch messages from chat with specified chat id.
# 
# @param int $id  (required)
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $query Find messages by specified search query (optional)
# @param int $start Return messages since specified timestamp only (optional)
# @param int $end Return messages up to specified timestamp only (optional)
# @param string $direction Order direction. Default is desc (optional, default to desc)
# @param int $voice Fetch results with voice calls (optional, default to 0)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find messages by specified search query',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Return messages since specified timestamp only',
        required => '0',
    },
    'end' => {
        data_type => 'int',
        description => 'Return messages up to specified timestamp only',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    'voice' => {
        data_type => 'int',
        description => 'Fetch results with voice calls',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_chat_messages' } = { 
    	summary => 'Fetch messages from chat with specified chat id.',
        params => $params,
        returns => 'GetChatMessagesResponse',
        };
}
# @return GetChatMessagesResponse
#
sub get_chat_messages {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_chat_messages");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/{id}/message';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'voice'}) {
        $query_params->{'voice'} = $self->{api_client}->to_query_value($args{'voice'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetChatMessagesResponse', $response);
    return $_response_object;
}

#
# get_contact
#
# Get a single contact.
# 
# @param int $id The contact id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The contact id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact' } = { 
    	summary => 'Get a single contact.',
        params => $params,
        returns => 'Contact',
        };
}
# @return Contact
#
sub get_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contact', $response);
    return $_response_object;
}

#
# get_contact_by_phone
#
# Get a single contact by phone number.
# 
# @param string $phone  (required)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_by_phone' } = { 
    	summary => 'Get a single contact by phone number.',
        params => $params,
        returns => 'Contact',
        };
}
# @return Contact
#
sub get_contact_by_phone {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling get_contact_by_phone");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/phone/{phone}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'phone'}) {
        my $_base_variable = "{" . "phone" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'phone'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contact', $response);
    return $_response_object;
}

#
# get_contact_if_blocked
#
# Check is that phone number blocked
# 
# @param string $phone Phone number to check (required)
{
    my $params = {
    'phone' => {
        data_type => 'string',
        description => 'Phone number to check',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_if_blocked' } = { 
    	summary => 'Check is that phone number blocked',
        params => $params,
        returns => 'Contact',
        };
}
# @return Contact
#
sub get_contact_if_blocked {
    my ($self, %args) = @_;

    # verify the required parameter 'phone' is set
    unless (exists $args{'phone'}) {
      croak("Missing the required parameter 'phone' when calling get_contact_if_blocked");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/block/phone';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'phone'}) {
        $query_params->{'phone'} = $self->{api_client}->to_query_value($args{'phone'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Contact', $response);
    return $_response_object;
}

#
# get_contact_import_session_progress
#
# Get contact import session progress.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_import_session_progress' } = { 
    	summary => 'Get contact import session progress.',
        params => $params,
        returns => 'GetContactImportSessionProgressResponse',
        };
}
# @return GetContactImportSessionProgressResponse
#
sub get_contact_import_session_progress {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_import_session_progress");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/import/progress/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactImportSessionProgressResponse', $response);
    return $_response_object;
}

#
# get_contact_note
#
# Get a single contact note.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_note' } = { 
    	summary => 'Get a single contact note.',
        params => $params,
        returns => 'ContactNote',
        };
}
# @return ContactNote
#
sub get_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/notes/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ContactNote', $response);
    return $_response_object;
}

#
# get_contact_notes
#
# Fetch notes assigned to the given contact.
# 
# @param int $id  (required)
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contact_notes' } = { 
    	summary => 'Fetch notes assigned to the given contact.',
        params => $params,
        returns => 'GetContactNotesResponse',
        };
}
# @return GetContactNotesResponse
#
sub get_contact_notes {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contact_notes");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/notes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactNotesResponse', $response);
    return $_response_object;
}

#
# get_contacts
#
# Get all user contacts.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param int $shared Should shared contacts to be included (optional, default to 0)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'shared' => {
        data_type => 'int',
        description => 'Should shared contacts to be included',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts' } = { 
    	summary => 'Get all user contacts.',
        params => $params,
        returns => 'GetContactsResponse',
        };
}
# @return GetContactsResponse
#
sub get_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'shared'}) {
        $query_params->{'shared'} = $self->{api_client}->to_query_value($args{'shared'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactsResponse', $response);
    return $_response_object;
}

#
# get_contacts_autocomplete
#
# Get contacts autocomplete suggestions by given search term.
# 
# @param string $query Find recipients by specified search query (required)
# @param int $limit How many results to return (optional, default to 10)
# @param int $lists Should lists be returned or not (optional, default to 0)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'Find recipients by specified search query',
        required => '1',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'lists' => {
        data_type => 'int',
        description => 'Should lists be returned or not',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts_autocomplete' } = { 
    	summary => 'Get contacts autocomplete suggestions by given search term.',
        params => $params,
        returns => 'ARRAY[GetContactsAutocompleteResponse]',
        };
}
# @return ARRAY[GetContactsAutocompleteResponse]
#
sub get_contacts_autocomplete {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling get_contacts_autocomplete");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/autocomplete';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'lists'}) {
        $query_params->{'lists'} = $self->{api_client}->to_query_value($args{'lists'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GetContactsAutocompleteResponse]', $response);
    return $_response_object;
}

#
# get_contacts_by_list_id
#
# Fetch user contacts by given group id.
# 
# @param int $id Given group Id. (required)
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Given group Id.',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_contacts_by_list_id' } = { 
    	summary => 'Fetch user contacts by given group id.',
        params => $params,
        returns => 'GetContactsByListIdResponse',
        };
}
# @return GetContactsByListIdResponse
#
sub get_contacts_by_list_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_contacts_by_list_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetContactsByListIdResponse', $response);
    return $_response_object;
}

#
# get_countries
#
# Return list of countries.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_countries' } = { 
    	summary => 'Return list of countries.',
        params => $params,
        returns => 'ARRAY[Country]',
        };
}
# @return ARRAY[Country]
#
sub get_countries {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/countries';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Country]', $response);
    return $_response_object;
}

#
# get_current_user
#
# Get current user info.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_current_user' } = { 
    	summary => 'Get current user info.',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_current_user {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_custom_field
#
# Get a single custom field.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_custom_field' } = { 
    	summary => 'Get a single custom field.',
        params => $params,
        returns => 'UserCustomField',
        };
}
# @return UserCustomField
#
sub get_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UserCustomField', $response);
    return $_response_object;
}

#
# get_custom_fields
#
# Get all contact custom fields.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_custom_fields' } = { 
    	summary => 'Get all contact custom fields.',
        params => $params,
        returns => 'GetCustomFieldsResponse',
        };
}
# @return GetCustomFieldsResponse
#
sub get_custom_fields {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/customfields';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetCustomFieldsResponse', $response);
    return $_response_object;
}

#
# get_dedicated_number
#
# Get a single dedicated number.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_dedicated_number' } = { 
    	summary => 'Get a single dedicated number.',
        params => $params,
        returns => 'UsersInbound',
        };
}
# @return UsersInbound
#
sub get_dedicated_number {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_dedicated_number");
    }

    # parse inputs
    my $_resource_path = '/api/v2/numbers/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UsersInbound', $response);
    return $_response_object;
}

#
# get_disallowed_rules
#
# Get an array of all rules that are disallowed to the current account.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_disallowed_rules' } = { 
    	summary => 'Get an array of all rules that are disallowed to the current account.',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub get_disallowed_rules {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/disallowed-rules';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# get_favourites
#
# Get favorite contacts and lists.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $query Find contacts or lists by specified search query (optional, default to A)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find contacts or lists by specified search query',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_favourites' } = { 
    	summary => 'Get favorite contacts and lists.',
        params => $params,
        returns => 'GetFavouritesResponse',
        };
}
# @return GetFavouritesResponse
#
sub get_favourites {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts/favorite';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetFavouritesResponse', $response);
    return $_response_object;
}

#
# get_forwarded_calls
#
# Get all forwarded calls.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_forwarded_calls' } = { 
    	summary => 'Get all forwarded calls.',
        params => $params,
        returns => 'GetForwardedCallsResponse',
        };
}
# @return GetForwardedCallsResponse
#
sub get_forwarded_calls {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/calls';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetForwardedCallsResponse', $response);
    return $_response_object;
}

#
# get_inbound_message
#
# Get a single inbox message.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_inbound_message' } = { 
    	summary => 'Get a single inbox message.',
        params => $params,
        returns => 'MessageIn',
        };
}
# @return MessageIn
#
sub get_inbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_inbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/replies/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageIn', $response);
    return $_response_object;
}

#
# get_inbound_messages_notification_settings
#
# Get inbound messages notification settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_inbound_messages_notification_settings' } = { 
    	summary => 'Get inbound messages notification settings',
        params => $params,
        returns => 'GetInboundMessagesNotificationSettingsResponse',
        };
}
# @return GetInboundMessagesNotificationSettingsResponse
#
sub get_inbound_messages_notification_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/inbound';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetInboundMessagesNotificationSettingsResponse', $response);
    return $_response_object;
}

#
# get_invoices
#
# Return account invoices.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_invoices' } = { 
    	summary => 'Return account invoices.',
        params => $params,
        returns => 'GetInvoicesResponse',
        };
}
# @return GetInvoicesResponse
#
sub get_invoices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/invoices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetInvoicesResponse', $response);
    return $_response_object;
}

#
# get_list
#
# Get a single list.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list' } = { 
    	summary => 'Get a single list.',
        params => $params,
        returns => 'Group',
        };
}
# @return Group
#
sub get_list {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Group', $response);
    return $_response_object;
}

#
# get_list_contacts_ids
#
# Fetch all contacts IDs belonging to the list with ID.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_list_contacts_ids' } = { 
    	summary => 'Fetch all contacts IDs belonging to the list with ID.',
        params => $params,
        returns => 'GetListContactsIdsResponse',
        };
}
# @return GetListContactsIdsResponse
#
sub get_list_contacts_ids {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_list_contacts_ids");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/contacts/ids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetListContactsIdsResponse', $response);
    return $_response_object;
}

#
# get_lists_of_contact
#
# Return lists which contact belongs to.
# 
# @param int $id  (required)
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_lists_of_contact' } = { 
    	summary => 'Return lists which contact belongs to.',
        params => $params,
        returns => 'GetListsOfContactResponse',
        };
}
# @return GetListsOfContactResponse
#
sub get_lists_of_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_lists_of_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/lists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetListsOfContactResponse', $response);
    return $_response_object;
}

#
# get_message_preview
#
# Preview message
# 
# @param string $text Message text. Required if template_id is not set (optional)
# @param int $template_id Template used instead of message text. Required if text is not set (optional)
# @param int $sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
# @param string $sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
# @param string $sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
# @param string $contacts Comma separated array of contact resources id message will be sent to (optional)
# @param string $lists Comma separated array of list resources id message will be sent to (optional)
# @param string $phones Comma separated array of E.164 phone numbers message will be sent to (optional)
# @param int $cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
# @param int $parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
# @param int $reference_id Custom message reference id which can be used in your application infrastructure (optional)
# @param string $from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
# @param string $rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
# @param int $create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
# @param int $tts Send Text to Speech message. Default is 0 (optional, default to 0)
# @param int $local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
# @param string $local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'Message text. Required if template_id is not set',
        required => '0',
    },
    'template_id' => {
        data_type => 'int',
        description => 'Template used instead of message text. Required if text is not set',
        required => '0',
    },
    'sending_time' => {
        data_type => 'int',
        description => 'DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now',
        required => '0',
    },
    'sending_date_time' => {
        data_type => 'string',
        description => 'Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone',
        required => '0',
    },
    'sending_timezone' => {
        data_type => 'string',
        description => 'ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone',
        required => '0',
    },
    'contacts' => {
        data_type => 'string',
        description => 'Comma separated array of contact resources id message will be sent to',
        required => '0',
    },
    'lists' => {
        data_type => 'string',
        description => 'Comma separated array of list resources id message will be sent to',
        required => '0',
    },
    'phones' => {
        data_type => 'string',
        description => 'Comma separated array of E.164 phone numbers message will be sent to',
        required => '0',
    },
    'cut_extra' => {
        data_type => 'int',
        description => 'Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0',
        required => '0',
    },
    'parts_count' => {
        data_type => 'int',
        description => 'Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6',
        required => '0',
    },
    'reference_id' => {
        data_type => 'int',
        description => 'Custom message reference id which can be used in your application infrastructure',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => 'One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery',
        required => '0',
    },
    'rule' => {
        data_type => 'string',
        description => 'iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details',
        required => '0',
    },
    'create_chat' => {
        data_type => 'int',
        description => 'Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0',
        required => '0',
    },
    'tts' => {
        data_type => 'int',
        description => 'Send Text to Speech message. Default is 0',
        required => '0',
    },
    'local' => {
        data_type => 'int',
        description => 'Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0',
        required => '0',
    },
    'local_country' => {
        data_type => 'string',
        description => '2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_preview' } = { 
    	summary => 'Preview message',
        params => $params,
        returns => 'GetMessagePreviewResponse',
        };
}
# @return GetMessagePreviewResponse
#
sub get_message_preview {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/preview';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'template_id'}) {
        $query_params->{'templateId'} = $self->{api_client}->to_query_value($args{'template_id'});
    }

    # query params
    if ( exists $args{'sending_time'}) {
        $query_params->{'sendingTime'} = $self->{api_client}->to_query_value($args{'sending_time'});
    }

    # query params
    if ( exists $args{'sending_date_time'}) {
        $query_params->{'sendingDateTime'} = $self->{api_client}->to_query_value($args{'sending_date_time'});
    }

    # query params
    if ( exists $args{'sending_timezone'}) {
        $query_params->{'sendingTimezone'} = $self->{api_client}->to_query_value($args{'sending_timezone'});
    }

    # query params
    if ( exists $args{'contacts'}) {
        $query_params->{'contacts'} = $self->{api_client}->to_query_value($args{'contacts'});
    }

    # query params
    if ( exists $args{'lists'}) {
        $query_params->{'lists'} = $self->{api_client}->to_query_value($args{'lists'});
    }

    # query params
    if ( exists $args{'phones'}) {
        $query_params->{'phones'} = $self->{api_client}->to_query_value($args{'phones'});
    }

    # query params
    if ( exists $args{'cut_extra'}) {
        $query_params->{'cutExtra'} = $self->{api_client}->to_query_value($args{'cut_extra'});
    }

    # query params
    if ( exists $args{'parts_count'}) {
        $query_params->{'partsCount'} = $self->{api_client}->to_query_value($args{'parts_count'});
    }

    # query params
    if ( exists $args{'reference_id'}) {
        $query_params->{'referenceId'} = $self->{api_client}->to_query_value($args{'reference_id'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'rule'}) {
        $query_params->{'rule'} = $self->{api_client}->to_query_value($args{'rule'});
    }

    # query params
    if ( exists $args{'create_chat'}) {
        $query_params->{'createChat'} = $self->{api_client}->to_query_value($args{'create_chat'});
    }

    # query params
    if ( exists $args{'tts'}) {
        $query_params->{'tts'} = $self->{api_client}->to_query_value($args{'tts'});
    }

    # query params
    if ( exists $args{'local'}) {
        $query_params->{'local'} = $self->{api_client}->to_query_value($args{'local'});
    }

    # query params
    if ( exists $args{'local_country'}) {
        $query_params->{'localCountry'} = $self->{api_client}->to_query_value($args{'local_country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagePreviewResponse', $response);
    return $_response_object;
}

#
# get_message_price
#
# Check price
# 
# @param int $include_blocked Should we show pricing for the blocked contacts. (optional, default to 0)
# @param string $text Message text. Required if template_id is not set (optional)
# @param int $template_id Template used instead of message text. Required if text is not set (optional)
# @param int $sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now (optional)
# @param string $sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone (optional)
# @param string $sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone (optional)
# @param string $contacts Comma separated array of contact resources id message will be sent to (optional)
# @param string $lists Comma separated array of list resources id message will be sent to (optional)
# @param string $phones Comma separated array of E.164 phone numbers message will be sent to (optional)
# @param int $cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0 (optional, default to 0)
# @param int $parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6 (optional, default to 6)
# @param int $reference_id Custom message reference id which can be used in your application infrastructure (optional)
# @param string $from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery (optional)
# @param string $rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details (optional)
# @param int $create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0 (optional, default to 0)
# @param int $tts Send Text to Speech message. Default is 0 (optional, default to 0)
# @param int $local Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0 (optional, default to 0)
# @param string $local_country 2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country (optional)
{
    my $params = {
    'include_blocked' => {
        data_type => 'int',
        description => 'Should we show pricing for the blocked contacts.',
        required => '0',
    },
    'text' => {
        data_type => 'string',
        description => 'Message text. Required if template_id is not set',
        required => '0',
    },
    'template_id' => {
        data_type => 'int',
        description => 'Template used instead of message text. Required if text is not set',
        required => '0',
    },
    'sending_time' => {
        data_type => 'int',
        description => 'DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now',
        required => '0',
    },
    'sending_date_time' => {
        data_type => 'string',
        description => 'Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone',
        required => '0',
    },
    'sending_timezone' => {
        data_type => 'string',
        description => 'ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime &#x3D; \\\&quot;2016-05-27 13:02:33\\\&quot; and sendingTimezone &#x3D; \\\&quot;America/Buenos_Aires\\\&quot;, your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone',
        required => '0',
    },
    'contacts' => {
        data_type => 'string',
        description => 'Comma separated array of contact resources id message will be sent to',
        required => '0',
    },
    'lists' => {
        data_type => 'string',
        description => 'Comma separated array of list resources id message will be sent to',
        required => '0',
    },
    'phones' => {
        data_type => 'string',
        description => 'Comma separated array of E.164 phone numbers message will be sent to',
        required => '0',
    },
    'cut_extra' => {
        data_type => 'int',
        description => 'Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is 0',
        required => '0',
    },
    'parts_count' => {
        data_type => 'int',
        description => 'Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6',
        required => '0',
    },
    'reference_id' => {
        data_type => 'int',
        description => 'Custom message reference id which can be used in your application infrastructure',
        required => '0',
    },
    'from' => {
        data_type => 'string',
        description => 'One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery',
        required => '0',
    },
    'rule' => {
        data_type => 'string',
        description => 'iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details',
        required => '0',
    },
    'create_chat' => {
        data_type => 'int',
        description => 'Should sending method try to create new Chat(if not exist) with specified recipients. Default is 0',
        required => '0',
    },
    'tts' => {
        data_type => 'int',
        description => 'Send Text to Speech message. Default is 0',
        required => '0',
    },
    'local' => {
        data_type => 'int',
        description => 'Treat phone numbers passed in \\&#39;phones\\&#39; field as local. Default is 0',
        required => '0',
    },
    'local_country' => {
        data_type => 'string',
        description => '2-letter ISO country code for local phone numbers, used when \\&#39;local\\&#39; is set to true. Default is account country',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_price' } = { 
    	summary => 'Check price',
        params => $params,
        returns => 'GetMessagePriceResponse',
        };
}
# @return GetMessagePriceResponse
#
sub get_message_price {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/price';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'include_blocked'}) {
        $query_params->{'includeBlocked'} = $self->{api_client}->to_query_value($args{'include_blocked'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'template_id'}) {
        $query_params->{'templateId'} = $self->{api_client}->to_query_value($args{'template_id'});
    }

    # query params
    if ( exists $args{'sending_time'}) {
        $query_params->{'sendingTime'} = $self->{api_client}->to_query_value($args{'sending_time'});
    }

    # query params
    if ( exists $args{'sending_date_time'}) {
        $query_params->{'sendingDateTime'} = $self->{api_client}->to_query_value($args{'sending_date_time'});
    }

    # query params
    if ( exists $args{'sending_timezone'}) {
        $query_params->{'sendingTimezone'} = $self->{api_client}->to_query_value($args{'sending_timezone'});
    }

    # query params
    if ( exists $args{'contacts'}) {
        $query_params->{'contacts'} = $self->{api_client}->to_query_value($args{'contacts'});
    }

    # query params
    if ( exists $args{'lists'}) {
        $query_params->{'lists'} = $self->{api_client}->to_query_value($args{'lists'});
    }

    # query params
    if ( exists $args{'phones'}) {
        $query_params->{'phones'} = $self->{api_client}->to_query_value($args{'phones'});
    }

    # query params
    if ( exists $args{'cut_extra'}) {
        $query_params->{'cutExtra'} = $self->{api_client}->to_query_value($args{'cut_extra'});
    }

    # query params
    if ( exists $args{'parts_count'}) {
        $query_params->{'partsCount'} = $self->{api_client}->to_query_value($args{'parts_count'});
    }

    # query params
    if ( exists $args{'reference_id'}) {
        $query_params->{'referenceId'} = $self->{api_client}->to_query_value($args{'reference_id'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'rule'}) {
        $query_params->{'rule'} = $self->{api_client}->to_query_value($args{'rule'});
    }

    # query params
    if ( exists $args{'create_chat'}) {
        $query_params->{'createChat'} = $self->{api_client}->to_query_value($args{'create_chat'});
    }

    # query params
    if ( exists $args{'tts'}) {
        $query_params->{'tts'} = $self->{api_client}->to_query_value($args{'tts'});
    }

    # query params
    if ( exists $args{'local'}) {
        $query_params->{'local'} = $self->{api_client}->to_query_value($args{'local'});
    }

    # query params
    if ( exists $args{'local_country'}) {
        $query_params->{'localCountry'} = $self->{api_client}->to_query_value($args{'local_country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagePriceResponse', $response);
    return $_response_object;
}

#
# get_message_prices
#
# Get pricing
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_message_prices' } = { 
    	summary => 'Get pricing',
        params => $params,
        returns => 'GetMessagePricesResponse',
        };
}
# @return GetMessagePricesResponse
#
sub get_message_prices {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/prices';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagePricesResponse', $response);
    return $_response_object;
}

#
# get_message_session
#
# Get a message session.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_session' } = { 
    	summary => 'Get a message session.',
        params => $params,
        returns => 'MessageSession',
        };
}
# @return MessageSession
#
sub get_message_session {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_message_session");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageSession', $response);
    return $_response_object;
}

#
# get_message_session_stat
#
# Get sending session statistics.
# 
# @param int $id  (required)
# @param int $include_deleted Search also in deleted messages (optional, default to 0)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'include_deleted' => {
        data_type => 'int',
        description => 'Search also in deleted messages',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_session_stat' } = { 
    	summary => 'Get sending session statistics.',
        params => $params,
        returns => 'GetMessageSessionStatResponse',
        };
}
# @return GetMessageSessionStatResponse
#
sub get_message_session_stat {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_message_session_stat");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}/stat';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'include_deleted'}) {
        $query_params->{'includeDeleted'} = $self->{api_client}->to_query_value($args{'include_deleted'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessageSessionStatResponse', $response);
    return $_response_object;
}

#
# get_messages_by_session_id
#
# Fetch messages by given session id.
# 
# @param int $id  (required)
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $statuses Find messages by status (optional)
# @param int $include_deleted Search also in deleted messages (optional, default to 0)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'statuses' => {
        data_type => 'string',
        description => 'Find messages by status',
        required => '0',
    },
    'include_deleted' => {
        data_type => 'int',
        description => 'Search also in deleted messages',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_messages_by_session_id' } = { 
    	summary => 'Fetch messages by given session id.',
        params => $params,
        returns => 'GetMessagesBySessionIdResponse',
        };
}
# @return GetMessagesBySessionIdResponse
#
sub get_messages_by_session_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_messages_by_session_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sessions/{id}/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'statuses'}) {
        $query_params->{'statuses'} = $self->{api_client}->to_query_value($args{'statuses'});
    }

    # query params
    if ( exists $args{'include_deleted'}) {
        $query_params->{'includeDeleted'} = $self->{api_client}->to_query_value($args{'include_deleted'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagesBySessionIdResponse', $response);
    return $_response_object;
}

#
# get_messaging_counters
#
# Return counters for messaging data views.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_messaging_counters' } = { 
    	summary => 'Return counters for messaging data views.',
        params => $params,
        returns => 'GetMessagingCountersResponse',
        };
}
# @return GetMessagingCountersResponse
#
sub get_messaging_counters {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/stats/messaging/data';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagingCountersResponse', $response);
    return $_response_object;
}

#
# get_messaging_stat
#
# Return messaging statistics.
# 
# @param string $by Group results by specified period: off, day, month or year. Default is off (optional, default to off)
# @param int $start Start date in unix timestamp format. Default is 7 days ago (optional)
# @param string $end End date in unix timestamp format. Default is now (optional)
{
    my $params = {
    'by' => {
        data_type => 'string',
        description => 'Group results by specified period: off, day, month or year. Default is off',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Start date in unix timestamp format. Default is 7 days ago',
        required => '0',
    },
    'end' => {
        data_type => 'string',
        description => 'End date in unix timestamp format. Default is now',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_messaging_stat' } = { 
    	summary => 'Return messaging statistics.',
        params => $params,
        returns => 'GetMessagingStatResponse',
        };
}
# @return GetMessagingStatResponse
#
sub get_messaging_stat {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/stats/messaging';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'by'}) {
        $query_params->{'by'} = $self->{api_client}->to_query_value($args{'by'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMessagingStatResponse', $response);
    return $_response_object;
}

#
# get_outbound_message
#
# Get a single message
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outbound_message' } = { 
    	summary => 'Get a single message',
        params => $params,
        returns => 'MessageOut',
        };
}
# @return MessageOut
#
sub get_outbound_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_outbound_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageOut', $response);
    return $_response_object;
}

#
# get_outbound_messages_history
#
# Get history
# 
# @param int $limit How many results to return (optional, default to 10)
# @param int $last_id Filter results by ID, selecting all values lesser than the specified ID. (optional)
# @param string $query Find message by specified search query (optional)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'last_id' => {
        data_type => 'int',
        description => 'Filter results by ID, selecting all values lesser than the specified ID.',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find message by specified search query',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_outbound_messages_history' } = { 
    	summary => 'Get history',
        params => $params,
        returns => 'GetOutboundMessagesHistoryResponse',
        };
}
# @return GetOutboundMessagesHistoryResponse
#
sub get_outbound_messages_history {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'last_id'}) {
        $query_params->{'lastId'} = $self->{api_client}->to_query_value($args{'last_id'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOutboundMessagesHistoryResponse', $response);
    return $_response_object;
}

#
# get_push_tokens
#
# Get all device tokens assigned to the current account
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_push_tokens' } = { 
    	summary => 'Get all device tokens assigned to the current account',
        params => $params,
        returns => 'GetPushTokensResponse',
        };
}
# @return GetPushTokensResponse
#
sub get_push_tokens {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/push/tokens';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetPushTokensResponse', $response);
    return $_response_object;
}

#
# get_scheduled_message
#
# Get message schedule.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scheduled_message' } = { 
    	summary => 'Get message schedule.',
        params => $params,
        returns => 'MessagesIcs',
        };
}
# @return MessagesIcs
#
sub get_scheduled_message {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_scheduled_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/schedules/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessagesIcs', $response);
    return $_response_object;
}

#
# get_sender_id
#
# Get a single Sender ID.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sender_id' } = { 
    	summary => 'Get a single Sender ID.',
        params => $params,
        returns => 'SenderId',
        };
}
# @return SenderId
#
sub get_sender_id {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_sender_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/senderids/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SenderId', $response);
    return $_response_object;
}

#
# get_sender_ids
#
# Get all sender IDs of current user.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sender_ids' } = { 
    	summary => 'Get all sender IDs of current user.',
        params => $params,
        returns => 'GetSenderIdsResponse',
        };
}
# @return GetSenderIdsResponse
#
sub get_sender_ids {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/senderids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSenderIdsResponse', $response);
    return $_response_object;
}

#
# get_sender_settings
#
# Get current user sender settings.
# 
# @param string $country Return sender settings enabled for sending to specified country. Two upper case characters (optional)
{
    my $params = {
    'country' => {
        data_type => 'string',
        description => 'Return sender settings enabled for sending to specified country. Two upper case characters',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_sender_settings' } = { 
    	summary => 'Get current user sender settings.',
        params => $params,
        returns => 'GetSenderSettingsResponse',
        };
}
# @return GetSenderSettingsResponse
#
sub get_sender_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/sender/settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSenderSettingsResponse', $response);
    return $_response_object;
}

#
# get_spending_stat
#
# Return account spending statistics.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param int $start Optional. Start date in unix timestamp format. Default is 7 days ago (optional)
# @param int $end Optional. End date in unix timestamp format. Default is now (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'Optional. Start date in unix timestamp format. Default is 7 days ago',
        required => '0',
    },
    'end' => {
        data_type => 'int',
        description => 'Optional. End date in unix timestamp format. Default is now',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_spending_stat' } = { 
    	summary => 'Return account spending statistics.',
        params => $params,
        returns => 'GetSpendingStatResponse',
        };
}
# @return GetSpendingStatResponse
#
sub get_spending_stat {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/stats/spending';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'end'}) {
        $query_params->{'end'} = $self->{api_client}->to_query_value($args{'end'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSpendingStatResponse', $response);
    return $_response_object;
}

#
# get_state
#
# Get current entities state
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_state' } = { 
    	summary => 'Get current entities state',
        params => $params,
        returns => 'GetStateResponse',
        };
}
# @return GetStateResponse
#
sub get_state {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/state';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetStateResponse', $response);
    return $_response_object;
}

#
# get_subaccount
#
# Get a single subaccount.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subaccount' } = { 
    	summary => 'Get a single subaccount.',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_subaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_subaccount");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_subaccounts
#
# Get all subaccounts of current user.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subaccounts' } = { 
    	summary => 'Get all subaccounts of current user.',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_subaccounts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_subaccounts_with_tokens
#
# Get all subaccounts with their REST API tokens associated with specified app name.
# 
# @param GetSubaccountsWithTokensInputObject $get_subaccounts_with_tokens_input_object  (required)
# @param Number $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'get_subaccounts_with_tokens_input_object' => {
        data_type => 'GetSubaccountsWithTokensInputObject',
        description => '',
        required => '1',
    },
    'page' => {
        data_type => 'Number',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subaccounts_with_tokens' } = { 
    	summary => 'Get all subaccounts with their REST API tokens associated with specified app name.',
        params => $params,
        returns => 'GetSubaccountsWithTokensResponse',
        };
}
# @return GetSubaccountsWithTokensResponse
#
sub get_subaccounts_with_tokens {
    my ($self, %args) = @_;

    # verify the required parameter 'get_subaccounts_with_tokens_input_object' is set
    unless (exists $args{'get_subaccounts_with_tokens_input_object'}) {
      croak("Missing the required parameter 'get_subaccounts_with_tokens_input_object' when calling get_subaccounts_with_tokens");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/tokens/list';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'get_subaccounts_with_tokens_input_object'}) {
        $_body_data = $args{'get_subaccounts_with_tokens_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSubaccountsWithTokensResponse', $response);
    return $_response_object;
}

#
# get_survey
#
# Get a survey by id.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey' } = { 
    	summary => 'Get a survey by id.',
        params => $params,
        returns => 'Survey',
        };
}
# @return Survey
#
sub get_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Survey', $response);
    return $_response_object;
}

#
# get_survey_node
#
# Get a node by id.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_node' } = { 
    	summary => 'Get a node by id.',
        params => $params,
        returns => 'SurveyNode',
        };
}
# @return SurveyNode
#
sub get_survey_node {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_node");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/nodes/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SurveyNode', $response);
    return $_response_object;
}

#
# get_survey_nodes
#
# Fetch nodes by given survey id.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_survey_nodes' } = { 
    	summary => 'Fetch nodes by given survey id.',
        params => $params,
        returns => 'GetSurveyNodesResponse',
        };
}
# @return GetSurveyNodesResponse
#
sub get_survey_nodes {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_survey_nodes");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}/nodes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSurveyNodesResponse', $response);
    return $_response_object;
}

#
# get_surveys
#
# Get all user surveys.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_surveys' } = { 
    	summary => 'Get all user surveys.',
        params => $params,
        returns => 'GetSurveysResponse',
        };
}
# @return GetSurveysResponse
#
sub get_surveys {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/surveys';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetSurveysResponse', $response);
    return $_response_object;
}

#
# get_template
#
# Get a single template.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_template' } = { 
    	summary => 'Get a single template.',
        params => $params,
        returns => 'MessageTemplate',
        };
}
# @return MessageTemplate
#
sub get_template {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MessageTemplate', $response);
    return $_response_object;
}

#
# get_timezones
#
# Return all available timezone IDs.
# 
# @param int $full Return full info about timezones in array (0 or 1). Default is 0 (optional, default to 0)
{
    my $params = {
    'full' => {
        data_type => 'int',
        description => 'Return full info about timezones in array (0 or 1). Default is 0',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_timezones' } = { 
    	summary => 'Return all available timezone IDs.',
        params => $params,
        returns => 'object',
        };
}
# @return object
#
sub get_timezones {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/timezones';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'full'}) {
        $query_params->{'full'} = $self->{api_client}->to_query_value($args{'full'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('object', $response);
    return $_response_object;
}

#
# get_unread_messages_total
#
# Get total amount of unread messages in the current user chats.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_unread_messages_total' } = { 
    	summary => 'Get total amount of unread messages in the current user chats.',
        params => $params,
        returns => 'GetUnreadMessagesTotalResponse',
        };
}
# @return GetUnreadMessagesTotalResponse
#
sub get_unread_messages_total {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/unread/count';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUnreadMessagesTotalResponse', $response);
    return $_response_object;
}

#
# get_unsubscribed_contact
#
# Get a single unsubscribed contact.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_unsubscribed_contact' } = { 
    	summary => 'Get a single unsubscribed contact.',
        params => $params,
        returns => 'UnsubscribedContact',
        };
}
# @return UnsubscribedContact
#
sub get_unsubscribed_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling get_unsubscribed_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/unsubscribers/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UnsubscribedContact', $response);
    return $_response_object;
}

#
# get_unsubscribers
#
# Get all contact have unsubscribed from your communication.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_unsubscribers' } = { 
    	summary => 'Get all contact have unsubscribed from your communication.',
        params => $params,
        returns => 'GetUnsubscribersResponse',
        };
}
# @return GetUnsubscribersResponse
#
sub get_unsubscribers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/unsubscribers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUnsubscribersResponse', $response);
    return $_response_object;
}

#
# get_user_dedicated_numbers
#
# Get user's dedicated numbers.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param int $survey_id Fetch only that numbers which are ready for the survey (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'survey_id' => {
        data_type => 'int',
        description => 'Fetch only that numbers which are ready for the survey',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_dedicated_numbers' } = { 
    	summary => 'Get user&#39;s dedicated numbers.',
        params => $params,
        returns => 'GetUserDedicatedNumbersResponse',
        };
}
# @return GetUserDedicatedNumbersResponse
#
sub get_user_dedicated_numbers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/numbers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'survey_id'}) {
        $query_params->{'surveyId'} = $self->{api_client}->to_query_value($args{'survey_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUserDedicatedNumbersResponse', $response);
    return $_response_object;
}

#
# get_user_lists
#
# Get all user lists.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
# @param int $favorite_only Return only favorite lists (optional, default to 0)
# @param int $only_mine Return only current user lists (optional, default to 0)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    'favorite_only' => {
        data_type => 'int',
        description => 'Return only favorite lists',
        required => '0',
    },
    'only_mine' => {
        data_type => 'int',
        description => 'Return only current user lists',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_lists' } = { 
    	summary => 'Get all user lists.',
        params => $params,
        returns => 'GetUserListsResponse',
        };
}
# @return GetUserListsResponse
#
sub get_user_lists {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/lists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'favorite_only'}) {
        $query_params->{'favoriteOnly'} = $self->{api_client}->to_query_value($args{'favorite_only'});
    }

    # query params
    if ( exists $args{'only_mine'}) {
        $query_params->{'onlyMine'} = $self->{api_client}->to_query_value($args{'only_mine'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetUserListsResponse', $response);
    return $_response_object;
}

#
# get_versions
#
# Get minimal valid apps versions
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_versions' } = { 
    	summary => 'Get minimal valid apps versions',
        params => $params,
        returns => 'GetVersionsResponse',
        };
}
# @return GetVersionsResponse
#
sub get_versions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/versions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetVersionsResponse', $response);
    return $_response_object;
}

#
# invite_subaccount
#
# Invite new subaccount.
# 
# @param InviteSubaccountInputObject $invite_subaccount_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'invite_subaccount_input_object' => {
        data_type => 'InviteSubaccountInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'invite_subaccount' } = { 
    	summary => 'Invite new subaccount.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub invite_subaccount {
    my ($self, %args) = @_;

    # verify the required parameter 'invite_subaccount_input_object' is set
    unless (exists $args{'invite_subaccount_input_object'}) {
      croak("Missing the required parameter 'invite_subaccount_input_object' when calling invite_subaccount");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'invite_subaccount_input_object'}) {
        $_body_data = $args{'invite_subaccount_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mark_chats_read_bulk
#
# Mark several chats as read by chat ids or mark all chats as read
# 
# @param MarkChatsReadBulkInputObject $mark_chats_read_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'mark_chats_read_bulk_input_object' => {
        data_type => 'MarkChatsReadBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mark_chats_read_bulk' } = { 
    	summary => 'Mark several chats as read by chat ids or mark all chats as read',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mark_chats_read_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'mark_chats_read_bulk_input_object' is set
    unless (exists $args{'mark_chats_read_bulk_input_object'}) {
      croak("Missing the required parameter 'mark_chats_read_bulk_input_object' when calling mark_chats_read_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/read/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'mark_chats_read_bulk_input_object'}) {
        $_body_data = $args{'mark_chats_read_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mark_chats_unread_bulk
#
# Mark several chats as UNread by chat ids or mark all chats as UNread
# 
# @param MarkChatsUnreadBulkInputObject $mark_chats_unread_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'mark_chats_unread_bulk_input_object' => {
        data_type => 'MarkChatsUnreadBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mark_chats_unread_bulk' } = { 
    	summary => 'Mark several chats as UNread by chat ids or mark all chats as UNread',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mark_chats_unread_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'mark_chats_unread_bulk_input_object' is set
    unless (exists $args{'mark_chats_unread_bulk_input_object'}) {
      croak("Missing the required parameter 'mark_chats_unread_bulk_input_object' when calling mark_chats_unread_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/unread/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'mark_chats_unread_bulk_input_object'}) {
        $_body_data = $args{'mark_chats_unread_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# merge_survey_nodes
#
# Merge two question nodes.
# 
# @param MergeSurveyNodesInputObject $merge_survey_nodes_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'merge_survey_nodes_input_object' => {
        data_type => 'MergeSurveyNodesInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'merge_survey_nodes' } = { 
    	summary => 'Merge two question nodes.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub merge_survey_nodes {
    my ($self, %args) = @_;

    # verify the required parameter 'merge_survey_nodes_input_object' is set
    unless (exists $args{'merge_survey_nodes_input_object'}) {
      croak("Missing the required parameter 'merge_survey_nodes_input_object' when calling merge_survey_nodes");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/nodes/merge';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'merge_survey_nodes_input_object'}) {
        $_body_data = $args{'merge_survey_nodes_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# mute_chat
#
# Set mute mode.
# 
# @param MuteChatInputObject $mute_chat_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'mute_chat_input_object' => {
        data_type => 'MuteChatInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mute_chat' } = { 
    	summary => 'Set mute mode.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub mute_chat {
    my ($self, %args) = @_;

    # verify the required parameter 'mute_chat_input_object' is set
    unless (exists $args{'mute_chat_input_object'}) {
      croak("Missing the required parameter 'mute_chat_input_object' when calling mute_chat");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/mute';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'mute_chat_input_object'}) {
        $_body_data = $args{'mute_chat_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# mute_chats_bulk
#
# Mute several chats by chat ids or mute all chats
# 
# @param MuteChatsBulkInputObject $mute_chats_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'mute_chats_bulk_input_object' => {
        data_type => 'MuteChatsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mute_chats_bulk' } = { 
    	summary => 'Mute several chats by chat ids or mute all chats',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub mute_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'mute_chats_bulk_input_object' is set
    unless (exists $args{'mute_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'mute_chats_bulk_input_object' when calling mute_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/mute/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'mute_chats_bulk_input_object'}) {
        $_body_data = $args{'mute_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# ping
#
# Just does a pong.
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'ping' } = { 
    	summary => 'Just does a pong.',
        params => $params,
        returns => 'PingResponse',
        };
}
# @return PingResponse
#
sub ping {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/ping';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PingResponse', $response);
    return $_response_object;
}

#
# reopen_chats_bulk
#
# Reopen chats by chat ids or reopen all chats
# 
# @param ReopenChatsBulkInputObject $reopen_chats_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'reopen_chats_bulk_input_object' => {
        data_type => 'ReopenChatsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'reopen_chats_bulk' } = { 
    	summary => 'Reopen chats by chat ids or reopen all chats',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub reopen_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'reopen_chats_bulk_input_object' is set
    unless (exists $args{'reopen_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'reopen_chats_bulk_input_object' when calling reopen_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/reopen/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'reopen_chats_bulk_input_object'}) {
        $_body_data = $args{'reopen_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# request_new_subaccount_token
#
# Request a new REST API token for subaccount.
# 
# @param RequestNewSubaccountTokenInputObject $request_new_subaccount_token_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'request_new_subaccount_token_input_object' => {
        data_type => 'RequestNewSubaccountTokenInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_new_subaccount_token' } = { 
    	summary => 'Request a new REST API token for subaccount.',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub request_new_subaccount_token {
    my ($self, %args) = @_;

    # verify the required parameter 'request_new_subaccount_token_input_object' is set
    unless (exists $args{'request_new_subaccount_token_input_object'}) {
      croak("Missing the required parameter 'request_new_subaccount_token_input_object' when calling request_new_subaccount_token");
    }

    # parse inputs
    my $_resource_path = '/api/v2/subaccounts/tokens';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_new_subaccount_token_input_object'}) {
        $_body_data = $args{'request_new_subaccount_token_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# request_sender_id
#
# Request for a new Sender ID.
# 
# @param RequestSenderIdInputObject $request_sender_id_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'request_sender_id_input_object' => {
        data_type => 'RequestSenderIdInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'request_sender_id' } = { 
    	summary => 'Request for a new Sender ID.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub request_sender_id {
    my ($self, %args) = @_;

    # verify the required parameter 'request_sender_id_input_object' is set
    unless (exists $args{'request_sender_id_input_object'}) {
      croak("Missing the required parameter 'request_sender_id_input_object' when calling request_sender_id");
    }

    # parse inputs
    my $_resource_path = '/api/v2/senderids';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'request_sender_id_input_object'}) {
        $_body_data = $args{'request_sender_id_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# reset_survey
#
# Reset a survey flow.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reset_survey' } = { 
    	summary => 'Reset a survey flow.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub reset_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling reset_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}/reset';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# search_chats
#
# Find chats by inbound or outbound messages text.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $query Find chats by specified search query (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find chats by specified search query',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_chats' } = { 
    	summary => 'Find chats by inbound or outbound messages text.',
        params => $params,
        returns => 'SearchChatsResponse',
        };
}
# @return SearchChatsResponse
#
sub search_chats {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchChatsResponse', $response);
    return $_response_object;
}

#
# search_chats_by_ids
#
# Find chats by IDs.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $ids Find chats by ID(s) (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find chats by ID(s)',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_chats_by_ids' } = { 
    	summary => 'Find chats by IDs.',
        params => $params,
        returns => 'SearchChatsByIdsResponse',
        };
}
# @return SearchChatsByIdsResponse
#
sub search_chats_by_ids {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/search/ids';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchChatsByIdsResponse', $response);
    return $_response_object;
}

#
# search_chats_by_receipent
#
# Find chats by recipient (contact, list name or phone number).
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $query Find chats by specified search query (optional)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find chats by specified search query',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_chats_by_receipent' } = { 
    	summary => 'Find chats by recipient (contact, list name or phone number).',
        params => $params,
        returns => 'SearchChatsByReceipentResponse',
        };
}
# @return SearchChatsByReceipentResponse
#
sub search_chats_by_receipent {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/chats/search/recipients';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchChatsByReceipentResponse', $response);
    return $_response_object;
}

#
# search_contacts
#
# Find user contacts by given parameters.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param int $shared Should shared contacts to be included (optional, default to 0)
# @param string $ids Find contact by ID(s) (optional)
# @param int $list_id Find contact by List ID (optional)
# @param int $include_blocked Should blocked contacts to be included (optional)
# @param string $query Find contacts by specified search query (optional)
# @param int $local Treat phone number passed in &#39;query&#39; field as local. Default is 0 (optional, default to 0)
# @param string $country 2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country (optional)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'shared' => {
        data_type => 'int',
        description => 'Should shared contacts to be included',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find contact by ID(s)',
        required => '0',
    },
    'list_id' => {
        data_type => 'int',
        description => 'Find contact by List ID',
        required => '0',
    },
    'include_blocked' => {
        data_type => 'int',
        description => 'Should blocked contacts to be included',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find contacts by specified search query',
        required => '0',
    },
    'local' => {
        data_type => 'int',
        description => 'Treat phone number passed in &#39;query&#39; field as local. Default is 0',
        required => '0',
    },
    'country' => {
        data_type => 'string',
        description => '2-letter ISO country code for local phone numbers, used when &#39;local&#39; is set to true. Default is account country',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_contacts' } = { 
    	summary => 'Find user contacts by given parameters.',
        params => $params,
        returns => 'SearchContactsResponse',
        };
}
# @return SearchContactsResponse
#
sub search_contacts {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/contacts/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'shared'}) {
        $query_params->{'shared'} = $self->{api_client}->to_query_value($args{'shared'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'list_id'}) {
        $query_params->{'listId'} = $self->{api_client}->to_query_value($args{'list_id'});
    }

    # query params
    if ( exists $args{'include_blocked'}) {
        $query_params->{'includeBlocked'} = $self->{api_client}->to_query_value($args{'include_blocked'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'local'}) {
        $query_params->{'local'} = $self->{api_client}->to_query_value($args{'local'});
    }

    # query params
    if ( exists $args{'country'}) {
        $query_params->{'country'} = $self->{api_client}->to_query_value($args{'country'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchContactsResponse', $response);
    return $_response_object;
}

#
# search_inbound_messages
#
# Find inbound messages by given parameters.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $ids Find message by ID(s) (optional)
# @param string $query Find recipients by specified search query (optional)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
# @param int $expand Expand by adding firstName, lastName and contactId (optional, default to 0)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find message by ID(s)',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find recipients by specified search query',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    'expand' => {
        data_type => 'int',
        description => 'Expand by adding firstName, lastName and contactId',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_inbound_messages' } = { 
    	summary => 'Find inbound messages by given parameters.',
        params => $params,
        returns => 'SearchInboundMessagesResponse',
        };
}
# @return SearchInboundMessagesResponse
#
sub search_inbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/replies/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    # query params
    if ( exists $args{'expand'}) {
        $query_params->{'expand'} = $self->{api_client}->to_query_value($args{'expand'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchInboundMessagesResponse', $response);
    return $_response_object;
}

#
# search_lists
#
# Find contact lists by given parameters.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $ids Find lists by ID(s) (optional)
# @param string $query Find lists by specified search query (optional)
# @param int $only_mine Return only current user lists (optional, default to 0)
# @param int $only_default Return only default lists (optional, default to 0)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find lists by ID(s)',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find lists by specified search query',
        required => '0',
    },
    'only_mine' => {
        data_type => 'int',
        description => 'Return only current user lists',
        required => '0',
    },
    'only_default' => {
        data_type => 'int',
        description => 'Return only default lists',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_lists' } = { 
    	summary => 'Find contact lists by given parameters.',
        params => $params,
        returns => 'SearchListsResponse',
        };
}
# @return SearchListsResponse
#
sub search_lists {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/lists/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'only_mine'}) {
        $query_params->{'onlyMine'} = $self->{api_client}->to_query_value($args{'only_mine'});
    }

    # query params
    if ( exists $args{'only_default'}) {
        $query_params->{'onlyDefault'} = $self->{api_client}->to_query_value($args{'only_default'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchListsResponse', $response);
    return $_response_object;
}

#
# search_outbound_messages
#
# Find messages
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param int $last_id Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified (optional)
# @param string $ids Find message by ID(s) (optional)
# @param int $session_id Find messages by session ID (optional)
# @param string $statuses Find messages by status (optional)
# @param int $include_deleted Search also in deleted messages (optional, default to 0)
# @param string $query Find messages by specified search query (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'last_id' => {
        data_type => 'int',
        description => 'Filter results by ID, selecting all values lesser than the specified ID. Note that \\&#39;page\\&#39; parameter is ignored when \\&#39;lastId\\&#39; is specified',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find message by ID(s)',
        required => '0',
    },
    'session_id' => {
        data_type => 'int',
        description => 'Find messages by session ID',
        required => '0',
    },
    'statuses' => {
        data_type => 'string',
        description => 'Find messages by status',
        required => '0',
    },
    'include_deleted' => {
        data_type => 'int',
        description => 'Search also in deleted messages',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find messages by specified search query',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_outbound_messages' } = { 
    	summary => 'Find messages',
        params => $params,
        returns => 'SearchOutboundMessagesResponse',
        };
}
# @return SearchOutboundMessagesResponse
#
sub search_outbound_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/messages/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'last_id'}) {
        $query_params->{'lastId'} = $self->{api_client}->to_query_value($args{'last_id'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'session_id'}) {
        $query_params->{'sessionId'} = $self->{api_client}->to_query_value($args{'session_id'});
    }

    # query params
    if ( exists $args{'statuses'}) {
        $query_params->{'statuses'} = $self->{api_client}->to_query_value($args{'statuses'});
    }

    # query params
    if ( exists $args{'include_deleted'}) {
        $query_params->{'includeDeleted'} = $self->{api_client}->to_query_value($args{'include_deleted'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchOutboundMessagesResponse', $response);
    return $_response_object;
}

#
# search_scheduled_messages
#
# Find scheduled messages by given parameters.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $query Find messages by specified search query (optional)
# @param string $ids Find schedules by ID(s) (optional)
# @param string $status Fetch schedules with the specific status: a - actual, c - completed, x - all (optional, default to x)
# @param string $order_by Order results by some field. Default is id (optional, default to id)
# @param string $direction Order direction. Default is desc (optional, default to desc)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'query' => {
        data_type => 'string',
        description => 'Find messages by specified search query',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find schedules by ID(s)',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Fetch schedules with the specific status: a - actual, c - completed, x - all',
        required => '0',
    },
    'order_by' => {
        data_type => 'string',
        description => 'Order results by some field. Default is id',
        required => '0',
    },
    'direction' => {
        data_type => 'string',
        description => 'Order direction. Default is desc',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_scheduled_messages' } = { 
    	summary => 'Find scheduled messages by given parameters.',
        params => $params,
        returns => 'SearchScheduledMessagesResponse',
        };
}
# @return SearchScheduledMessagesResponse
#
sub search_scheduled_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/schedules/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'order_by'}) {
        $query_params->{'orderBy'} = $self->{api_client}->to_query_value($args{'order_by'});
    }

    # query params
    if ( exists $args{'direction'}) {
        $query_params->{'direction'} = $self->{api_client}->to_query_value($args{'direction'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchScheduledMessagesResponse', $response);
    return $_response_object;
}

#
# search_templates
#
# Find user templates by given parameters.
# 
# @param int $page Fetch specified results page (optional, default to 1)
# @param int $limit How many results to return (optional, default to 10)
# @param string $ids Find template by ID(s) (optional)
# @param string $name Find template by name (optional)
# @param string $content Find template by content (optional)
{
    my $params = {
    'page' => {
        data_type => 'int',
        description => 'Fetch specified results page',
        required => '0',
    },
    'limit' => {
        data_type => 'int',
        description => 'How many results to return',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Find template by ID(s)',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Find template by name',
        required => '0',
    },
    'content' => {
        data_type => 'string',
        description => 'Find template by content',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_templates' } = { 
    	summary => 'Find user templates by given parameters.',
        params => $params,
        returns => 'SearchTemplatesResponse',
        };
}
# @return SearchTemplatesResponse
#
sub search_templates {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/templates/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchTemplatesResponse', $response);
    return $_response_object;
}

#
# send_email_verification_code
#
# Send user email verification
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'send_email_verification_code' } = { 
    	summary => 'Send user email verification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_email_verification_code {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/email/verification';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# send_message
#
# Send message
# 
# @param SendMessageInputObject $send_message_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'send_message_input_object' => {
        data_type => 'SendMessageInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_message' } = { 
    	summary => 'Send message',
        params => $params,
        returns => 'SendMessageResponse',
        };
}
# @return SendMessageResponse
#
sub send_message {
    my ($self, %args) = @_;

    # verify the required parameter 'send_message_input_object' is set
    unless (exists $args{'send_message_input_object'}) {
      croak("Missing the required parameter 'send_message_input_object' when calling send_message");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'send_message_input_object'}) {
        $_body_data = $args{'send_message_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SendMessageResponse', $response);
    return $_response_object;
}

#
# send_phone_verification_code
#
# Send user phone verification
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'send_phone_verification_code' } = { 
    	summary => 'Send user phone verification',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub send_phone_verification_code {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/v2/user/phone/verification';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# set_chat_status
#
# Set status of the chat given by ID.
# 
# @param SetChatStatusInputObject $set_chat_status_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'set_chat_status_input_object' => {
        data_type => 'SetChatStatusInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_chat_status' } = { 
    	summary => 'Set status of the chat given by ID.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub set_chat_status {
    my ($self, %args) = @_;

    # verify the required parameter 'set_chat_status_input_object' is set
    unless (exists $args{'set_chat_status_input_object'}) {
      croak("Missing the required parameter 'set_chat_status_input_object' when calling set_chat_status");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/status';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'set_chat_status_input_object'}) {
        $_body_data = $args{'set_chat_status_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# start_survey
#
# Start a survey.
# 
# @param int $id  (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'start_survey' } = { 
    	summary => 'Start a survey.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub start_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling start_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}/start';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# unblock_contact
#
# Unblock contact by phone number.
# 
# @param UnblockContactInputObject $unblock_contact_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'unblock_contact_input_object' => {
        data_type => 'UnblockContactInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'unblock_contact' } = { 
    	summary => 'Unblock contact by phone number.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub unblock_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'unblock_contact_input_object' is set
    unless (exists $args{'unblock_contact_input_object'}) {
      croak("Missing the required parameter 'unblock_contact_input_object' when calling unblock_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/unblock';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'unblock_contact_input_object'}) {
        $_body_data = $args{'unblock_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# unblock_contacts_bulk
#
# Unblock several contacts by blocked contact ids or unblock all contacts
# 
# @param UnblockContactsBulkInputObject $unblock_contacts_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'unblock_contacts_bulk_input_object' => {
        data_type => 'UnblockContactsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'unblock_contacts_bulk' } = { 
    	summary => 'Unblock several contacts by blocked contact ids or unblock all contacts',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub unblock_contacts_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'unblock_contacts_bulk_input_object' is set
    unless (exists $args{'unblock_contacts_bulk_input_object'}) {
      croak("Missing the required parameter 'unblock_contacts_bulk_input_object' when calling unblock_contacts_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/unblock/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'unblock_contacts_bulk_input_object'}) {
        $_body_data = $args{'unblock_contacts_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# unmute_chats_bulk
#
# Unmute several chats by chat ids or unmute all chats
# 
# @param UnmuteChatsBulkInputObject $unmute_chats_bulk_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'unmute_chats_bulk_input_object' => {
        data_type => 'UnmuteChatsBulkInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'unmute_chats_bulk' } = { 
    	summary => 'Unmute several chats by chat ids or unmute all chats',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub unmute_chats_bulk {
    my ($self, %args) = @_;

    # verify the required parameter 'unmute_chats_bulk_input_object' is set
    unless (exists $args{'unmute_chats_bulk_input_object'}) {
      croak("Missing the required parameter 'unmute_chats_bulk_input_object' when calling unmute_chats_bulk");
    }

    # parse inputs
    my $_resource_path = '/api/v2/chats/unmute/bulk';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'unmute_chats_bulk_input_object'}) {
        $_body_data = $args{'unmute_chats_bulk_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# unsubscribe_contact
#
# Unsubscribe contact from your communication by phone number.
# 
# @param UnsubscribeContactInputObject $unsubscribe_contact_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'unsubscribe_contact_input_object' => {
        data_type => 'UnsubscribeContactInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'unsubscribe_contact' } = { 
    	summary => 'Unsubscribe contact from your communication by phone number.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub unsubscribe_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'unsubscribe_contact_input_object' is set
    unless (exists $args{'unsubscribe_contact_input_object'}) {
      croak("Missing the required parameter 'unsubscribe_contact_input_object' when calling unsubscribe_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/unsubscribers';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'unsubscribe_contact_input_object'}) {
        $_body_data = $args{'unsubscribe_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_balance_notification_settings
#
# Update balance notification settings
# 
# @param UpdateBalanceNotificationSettingsInputObject $update_balance_notification_settings_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_balance_notification_settings_input_object' => {
        data_type => 'UpdateBalanceNotificationSettingsInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_balance_notification_settings' } = { 
    	summary => 'Update balance notification settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_balance_notification_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_balance_notification_settings_input_object' is set
    unless (exists $args{'update_balance_notification_settings_input_object'}) {
      croak("Missing the required parameter 'update_balance_notification_settings_input_object' when calling update_balance_notification_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/balance';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_balance_notification_settings_input_object'}) {
        $_body_data = $args{'update_balance_notification_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_callback_settings
#
# Update callback URL settings
# 
# @param UpdateCallbackSettingsInputObject $update_callback_settings_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_callback_settings_input_object' => {
        data_type => 'UpdateCallbackSettingsInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_callback_settings' } = { 
    	summary => 'Update callback URL settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_callback_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_callback_settings_input_object' is set
    unless (exists $args{'update_callback_settings_input_object'}) {
      croak("Missing the required parameter 'update_callback_settings_input_object' when calling update_callback_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/callback/settings';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_callback_settings_input_object'}) {
        $_body_data = $args{'update_callback_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_chat_desktop_notification_settings
#
# Update chat desktop notification settings
# 
# @param UpdateChatDesktopNotificationSettingsInputObject $update_chat_desktop_notification_settings_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_chat_desktop_notification_settings_input_object' => {
        data_type => 'UpdateChatDesktopNotificationSettingsInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_chat_desktop_notification_settings' } = { 
    	summary => 'Update chat desktop notification settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_chat_desktop_notification_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_chat_desktop_notification_settings_input_object' is set
    unless (exists $args{'update_chat_desktop_notification_settings_input_object'}) {
      croak("Missing the required parameter 'update_chat_desktop_notification_settings_input_object' when calling update_chat_desktop_notification_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/desktop/notification';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_chat_desktop_notification_settings_input_object'}) {
        $_body_data = $args{'update_chat_desktop_notification_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_contact
#
# Update existing contact.
# 
# @param UpdateContactInputObject $update_contact_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_contact_input_object' => {
        data_type => 'UpdateContactInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact' } = { 
    	summary => 'Update existing contact.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_contact {
    my ($self, %args) = @_;

    # verify the required parameter 'update_contact_input_object' is set
    unless (exists $args{'update_contact_input_object'}) {
      croak("Missing the required parameter 'update_contact_input_object' when calling update_contact");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_contact");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_contact_input_object'}) {
        $_body_data = $args{'update_contact_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_contact_note
#
# Update existing contact note.
# 
# @param UpdateContactNoteInputObject $update_contact_note_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_contact_note_input_object' => {
        data_type => 'UpdateContactNoteInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_contact_note' } = { 
    	summary => 'Update existing contact note.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_contact_note {
    my ($self, %args) = @_;

    # verify the required parameter 'update_contact_note_input_object' is set
    unless (exists $args{'update_contact_note_input_object'}) {
      croak("Missing the required parameter 'update_contact_note_input_object' when calling update_contact_note");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_contact_note");
    }

    # parse inputs
    my $_resource_path = '/api/v2/notes/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_contact_note_input_object'}) {
        $_body_data = $args{'update_contact_note_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_current_user
#
# Update current user info.
# 
# @param UpdateCurrentUserInputObject $update_current_user_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_current_user_input_object' => {
        data_type => 'UpdateCurrentUserInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_current_user' } = { 
    	summary => 'Update current user info.',
        params => $params,
        returns => 'UpdateCurrentUserResponse',
        };
}
# @return UpdateCurrentUserResponse
#
sub update_current_user {
    my ($self, %args) = @_;

    # verify the required parameter 'update_current_user_input_object' is set
    unless (exists $args{'update_current_user_input_object'}) {
      croak("Missing the required parameter 'update_current_user_input_object' when calling update_current_user");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_current_user_input_object'}) {
        $_body_data = $args{'update_current_user_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UpdateCurrentUserResponse', $response);
    return $_response_object;
}

#
# update_custom_field
#
# Update existing custom field.
# 
# @param UpdateCustomFieldInputObject $update_custom_field_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_custom_field_input_object' => {
        data_type => 'UpdateCustomFieldInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_custom_field' } = { 
    	summary => 'Update existing custom field.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_custom_field {
    my ($self, %args) = @_;

    # verify the required parameter 'update_custom_field_input_object' is set
    unless (exists $args{'update_custom_field_input_object'}) {
      croak("Missing the required parameter 'update_custom_field_input_object' when calling update_custom_field");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_custom_field");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_custom_field_input_object'}) {
        $_body_data = $args{'update_custom_field_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_custom_field_value
#
# Update contact's custom field value.
# 
# @param UpdateCustomFieldValueInputObject $update_custom_field_value_input_object  (required)
# @param string $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_custom_field_value_input_object' => {
        data_type => 'UpdateCustomFieldValueInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_custom_field_value' } = { 
    	summary => 'Update contact&#39;s custom field value.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_custom_field_value {
    my ($self, %args) = @_;

    # verify the required parameter 'update_custom_field_value_input_object' is set
    unless (exists $args{'update_custom_field_value_input_object'}) {
      croak("Missing the required parameter 'update_custom_field_value_input_object' when calling update_custom_field_value");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_custom_field_value");
    }

    # parse inputs
    my $_resource_path = '/api/v2/customfields/{id}/update';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_custom_field_value_input_object'}) {
        $_body_data = $args{'update_custom_field_value_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_inbound_messages_notification_settings
#
# Update inbound messages notification settings
# 
# @param UpdateInboundMessagesNotificationSettingsInputObject $update_inbound_messages_notification_settings_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_inbound_messages_notification_settings_input_object' => {
        data_type => 'UpdateInboundMessagesNotificationSettingsInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_inbound_messages_notification_settings' } = { 
    	summary => 'Update inbound messages notification settings',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_inbound_messages_notification_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'update_inbound_messages_notification_settings_input_object' is set
    unless (exists $args{'update_inbound_messages_notification_settings_input_object'}) {
      croak("Missing the required parameter 'update_inbound_messages_notification_settings_input_object' when calling update_inbound_messages_notification_settings");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/notification/inbound';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_inbound_messages_notification_settings_input_object'}) {
        $_body_data = $args{'update_inbound_messages_notification_settings_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_list
#
# Update existing list.
# 
# @param int $id  (required)
# @param UpdateListObject $update_list_object  (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'update_list_object' => {
        data_type => 'UpdateListObject',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_list' } = { 
    	summary => 'Update existing list.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_list {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_list");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_list_object'}) {
        $_body_data = $args{'update_list_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_password
#
# Change user password.
# 
# @param UpdatePasswordInputObject $update_password_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_password_input_object' => {
        data_type => 'UpdatePasswordInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_password' } = { 
    	summary => 'Change user password.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_password {
    my ($self, %args) = @_;

    # verify the required parameter 'update_password_input_object' is set
    unless (exists $args{'update_password_input_object'}) {
      croak("Missing the required parameter 'update_password_input_object' when calling update_password");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/password/change';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_password_input_object'}) {
        $_body_data = $args{'update_password_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_sender_setting
#
# Change sender settings for specified country.
# 
# @param UpdateSenderSettingInputObject $update_sender_setting_input_object  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_sender_setting_input_object' => {
        data_type => 'UpdateSenderSettingInputObject',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_sender_setting' } = { 
    	summary => 'Change sender settings for specified country.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub update_sender_setting {
    my ($self, %args) = @_;

    # verify the required parameter 'update_sender_setting_input_object' is set
    unless (exists $args{'update_sender_setting_input_object'}) {
      croak("Missing the required parameter 'update_sender_setting_input_object' when calling update_sender_setting");
    }

    # parse inputs
    my $_resource_path = '/api/v2/sender/settings';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_sender_setting_input_object'}) {
        $_body_data = $args{'update_sender_setting_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# update_survey
#
# Update existing survey.
# 
# @param UpdateSurveyInputObject $update_survey_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_survey_input_object' => {
        data_type => 'UpdateSurveyInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey' } = { 
    	summary => 'Update existing survey.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_survey {
    my ($self, %args) = @_;

    # verify the required parameter 'update_survey_input_object' is set
    unless (exists $args{'update_survey_input_object'}) {
      croak("Missing the required parameter 'update_survey_input_object' when calling update_survey");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_survey_input_object'}) {
        $_body_data = $args{'update_survey_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_survey_node
#
# Update existing node.
# 
# @param UpdateSurveyNodeInputObject $update_survey_node_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_survey_node_input_object' => {
        data_type => 'UpdateSurveyNodeInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_survey_node' } = { 
    	summary => 'Update existing node.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_survey_node {
    my ($self, %args) = @_;

    # verify the required parameter 'update_survey_node_input_object' is set
    unless (exists $args{'update_survey_node_input_object'}) {
      croak("Missing the required parameter 'update_survey_node_input_object' when calling update_survey_node");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_survey_node");
    }

    # parse inputs
    my $_resource_path = '/api/v2/surveys/nodes/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_survey_node_input_object'}) {
        $_body_data = $args{'update_survey_node_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# update_template
#
# Update existing template.
# 
# @param UpdateTemplateInputObject $update_template_input_object  (required)
# @param int $id  (required)
# @param boolean $x_ignore_null_values  (optional, default to true)
{
    my $params = {
    'update_template_input_object' => {
        data_type => 'UpdateTemplateInputObject',
        description => '',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'x_ignore_null_values' => {
        data_type => 'boolean',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_template' } = { 
    	summary => 'Update existing template.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub update_template {
    my ($self, %args) = @_;

    # verify the required parameter 'update_template_input_object' is set
    unless (exists $args{'update_template_input_object'}) {
      croak("Missing the required parameter 'update_template_input_object' when calling update_template");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling update_template");
    }

    # parse inputs
    my $_resource_path = '/api/v2/templates/{id}';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'x_ignore_null_values'}) {
        $header_params->{'X-Ignore-Null-Values'} = $self->{api_client}->to_header_value($args{'x_ignore_null_values'});
    }

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'update_template_input_object'}) {
        $_body_data = $args{'update_template_input_object'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# upload_avatar
#
# Add an avatar for the current user.
# 
# @param File $image User avatar. Should be PNG or JPG file not more than 10 MB (required)
{
    my $params = {
    'image' => {
        data_type => 'File',
        description => 'User avatar. Should be PNG or JPG file not more than 10 MB',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_avatar' } = { 
    	summary => 'Add an avatar for the current user.',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub upload_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling upload_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/user/avatar';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# upload_contact_avatar
#
# Add an avatar for the contact.
# 
# @param File $image Contact avatar. Should be PNG or JPG file not more than 10 MB (required)
# @param int $id  (required)
{
    my $params = {
    'image' => {
        data_type => 'File',
        description => 'Contact avatar. Should be PNG or JPG file not more than 10 MB',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_contact_avatar' } = { 
    	summary => 'Add an avatar for the contact.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub upload_contact_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling upload_contact_avatar");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling upload_contact_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/contacts/{id}/avatar';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# upload_list_avatar
#
# Add an avatar for the list.
# 
# @param File $image List avatar. Should be PNG or JPG file not more than 10 MB (required)
# @param int $id  (required)
{
    my $params = {
    'image' => {
        data_type => 'File',
        description => 'List avatar. Should be PNG or JPG file not more than 10 MB',
        required => '1',
    },
    'id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_list_avatar' } = { 
    	summary => 'Add an avatar for the list.',
        params => $params,
        returns => 'ResourceLinkResponse',
        };
}
# @return ResourceLinkResponse
#
sub upload_list_avatar {
    my ($self, %args) = @_;

    # verify the required parameter 'image' is set
    unless (exists $args{'image'}) {
      croak("Missing the required parameter 'image' when calling upload_list_avatar");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling upload_list_avatar");
    }

    # parse inputs
    my $_resource_path = '/api/v2/lists/{id}/avatar';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'image'} ) {
        $form_params->{'image'} = [] unless defined $form_params->{'image'};
        push @{$form_params->{'image'}}, $args{'image'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceLinkResponse', $response);
    return $_response_object;
}

#
# upload_message_attachment
#
# Upload message attachment
# 
# @param File $file Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats (required)
{
    my $params = {
    'file' => {
        data_type => 'File',
        description => 'Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc, .docx, .xls, .xlsx, .ppt, .pptx &amp; .vcf file formats',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_message_attachment' } = { 
    	summary => 'Upload message attachment',
        params => $params,
        returns => 'UploadMessageAttachmentResponse',
        };
}
# @return UploadMessageAttachmentResponse
#
sub upload_message_attachment {
    my ($self, %args) = @_;

    # verify the required parameter 'file' is set
    unless (exists $args{'file'}) {
      croak("Missing the required parameter 'file' when calling upload_message_attachment");
    }

    # parse inputs
    my $_resource_path = '/api/v2/messages/attachment';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'file'} ) {
        $form_params->{'file'} = [] unless defined $form_params->{'file'};
        push @{$form_params->{'file'}}, $args{'file'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(BasicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UploadMessageAttachmentResponse', $response);
    return $_response_object;
}

1;
